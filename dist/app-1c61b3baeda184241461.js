!function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var r={};return e.m=t,e.c=r,e.i=function(t){return t},e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=30)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n="a_position",i=0,a="a_norm",o=1,u="a_uv",s=2;e.ATTR_NORMAL_LOC=o,e.ATTR_NORMAL_NAME=a,e.ATTR_POSITION_LOC=i,e.ATTR_POSITION_NAME=n,e.ATTR_UV_LOC=s,e.ATTR_UV_NAME=u},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=r(4),u=n(o),s=function(){function t(e){i(this,t),this.transform=new u.default,this.mesh=e}return a(t,[{key:"setScale",value:function(t,e,r){return this.transform.scale.set(t,e,r),this}},{key:"setPosition",value:function(t,e,r){return this.transform.position.set(t,e,r),this}},{key:"setRotation",value:function(t,e,r){return this.transform.rotation.set(t,e,r),this}},{key:"addScale",value:function(t,e,r){return this.transform.scale.x+=t,this.transform.scale.y+=e,this.transform.scale.z+=r,this}},{key:"addPosition",value:function(t,e,r){return this.transform.position.x+=t,this.transform.position.y+=e,this.transform.position.z+=r,this}},{key:"addRotation",value:function(t,e,r){return this.transform.rotation.x+=t,this.transform.rotation.y+=e,this.transform.rotation.z+=r,this}},{key:"preRender",value:function(){return this.transform.updateMatrix(),this}}]),t}();e.default=s},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.Shader=e.ShaderUtil=void 0;var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(0),o=function(){function t(){n(this,t)}return i(t,null,[{key:"createShader",value:function(t,e,r){var n=t.createShader(r);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS)){var i=t.getShaderInfoLog(n);throw t.deleteShader(n),Error(i||"Error compiling shader : "+e)}if(!n)throw Error("Shader returned as null: "+e);return n}},{key:"createProgram",value:function(t,e,r,n){var i=t.createProgram();if(t.attachShader(i,e),t.attachShader(i,r),t.bindAttribLocation(i,a.ATTR_POSITION_LOC,a.ATTR_POSITION_NAME),t.bindAttribLocation(i,a.ATTR_NORMAL_LOC,a.ATTR_NORMAL_NAME),t.bindAttribLocation(i,a.ATTR_UV_LOC,a.ATTR_UV_NAME),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){var o=t.getProgramInfoLog(i);throw t.deleteProgram(i),Error(o||"Error creating shader program.")}if(n&&(t.validateProgram(i),!t.getProgramParameter(i,t.VALIDATE_STATUS))){var u=t.getProgramInfoLog(i);throw t.deleteProgram(i),Error(u||"Error validating program.")}return t.detachShader(i,e),t.detachShader(i,r),t.deleteShader(r),t.deleteShader(e),i}},{key:"shaderProgram",value:function(e,r,n,i){var a=t.createShader(e,r,e.VERTEX_SHADER);if(null===a)return e.deleteShader(a),null;var o=t.createShader(e,n,e.FRAGMENT_SHADER);return null===o?(e.deleteShader(o),null):t.createProgram(e,a,o,i)}},{key:"getStandardAttribLocations",value:function(t,e){return{position:t.getAttribLocation(e,a.ATTR_POSITION_NAME),norm:t.getAttribLocation(e,a.ATTR_NORMAL_NAME),uv:t.getAttribLocation(e,a.ATTR_UV_NAME)}}},{key:"getStandardUniformLocations",value:function(t,e){return{perspective:t.getUniformLocation(e,"uPMatrix"),modelMatrix:t.getUniformLocation(e,"uMVMatrix"),cameraMatrix:t.getUniformLocation(e,"uCameraMatrix"),mainTexture:t.getUniformLocation(e,"uMainTex")}}}]),t}(),u=function(){function t(e,r,i){n(this,t),this.program=o.shaderProgram(e,r,i,!0),null!==this.program&&(this.gl=e,e.useProgram(this.program),this.attribLoc=o.getStandardAttribLocations(this.gl,this.program),this.uniformLoc=o.getStandardUniformLocations(this.gl,this.program))}return i(t,[{key:"activate",value:function(){return this.gl.useProgram(this.program),this}},{key:"deactivate",value:function(){return this.gl.useProgram(null),this}},{key:"setPerspective",value:function(t){return this.gl.uniformMatrix4fv(this.uniformLoc.perspective,!1,t),this}},{key:"setModelMatrix",value:function(t){return this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix,!1,t),this}},{key:"setCameraMatrix",value:function(t){return this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix,!1,t),this}},{key:"dispose",value:function(){this.gl.getParameter(this.gl.CURRENT_PROGRAM)===this.program&&this.gl.useProgram(null),this.gl.deleteProgram(this.program)}},{key:"preRender",value:function(){}},{key:"renderModel",value:function(t){if(this.setModelMatrix(t.transform.getViewMatrix()),this.gl.bindVertexArray(t.mesh.vao),t.mesh.noCulling&&this.gl.disable(this.gl.CULL_FACE),t.mesh.doBlending&&this.gl.enable(this.gl.BLEND),void 0===t.mesh.drawMode)throw TypeError("[Shader][renderModel] model missing drawMode");if(t.mesh.indexCount)this.gl.drawElements(t.mesh.drawMode,t.mesh.indexCount,this.gl.UNSIGNED_SHORT,0);else{if(void 0===t.mesh.vertexCount)throw TypeError("[Shader][renderModel] model missing vertexCount");this.gl.drawArrays(t.mesh.drawMode,0,t.mesh.vertexCount),this.gl.bindVertexArray(null)}return t.mesh.noCulling&&this.gl.enable(this.gl.CULL_FACE),t.mesh.doBlending&&this.gl.disable(this.gl.BLEND),this}}]),t}();e.ShaderUtil=o,e.Shader=u},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=function(){function t(e,r,i){n(this,t),this.x=e||0,this.y=r||0,this.z=i||0}return i(t,[{key:"magnitude",value:function(t){if(void 0===t)return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);var e=t.x-this.x,r=t.y-this.y,n=t.y-this.z;return Math.sqrt(e*e+r*r+n*n)}},{key:"normalize",value:function(){var t=this.magnitude();return this.x/=t,this.y/=t,this.z/=t,this}},{key:"set",value:function(t,e,r){return this.x=t,this.y=e,this.z=r,this}},{key:"multiScalar",value:function(t){return this.x*=t,this.y*=t,this.z*=t,this}},{key:"getArray",value:function(){return[this.x,this.y,this.z]}},{key:"getFloatArray",value:function(){return new Float32Array([this.x,this.y,this.z])}},{key:"clone",value:function(){return new t(this.x,this.y,this.z)}}]),t}(),o=function(){function t(){n(this,t),this.raw=t.identity()}return i(t,[{key:"vtranslate",value:function(e){return t.translate(this.raw,e.x,e.y,e.z),this}},{key:"translate",value:function(e,r,n){return t.translate(this.raw,e,r,n),this}},{key:"rotateY",value:function(e){return t.rotateY(this.raw,e),this}},{key:"rotateX",value:function(e){return t.rotateX(this.raw,e),this}},{key:"rotateZ",value:function(e){return t.rotateZ(this.raw,e),this}},{key:"vscale",value:function(e){return t.scale(this.raw,e.x,e.y,e.z),this}},{key:"scale",value:function(e,r,n){return t.scale(this.raw,e,r,n),this}},{key:"invert",value:function(){return t.invert(this.raw),this}},{key:"resetRotation",value:function(){for(var t=0;t<this.raw.length;t++)t>=12&&t<=14||(this.raw[t]=t%5===0?1:0);return this}},{key:"reset",value:function(){for(var t=0;t<this.raw.length;t++)this.raw[t]=t%5===0?1:0;return this}}],[{key:"identity",value:function(){var t=new Float32Array(16);return t[0]=t[5]=t[10]=t[15]=1,t}},{key:"perspective",value:function(t,e,r,n,i){var a=1/Math.tan(e/2),o=1/(n-i);t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(i+n)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*i*n*o,t[15]=0}},{key:"ortho",value:function(t,e,r,n,i,a,o){var u=1/(e-r),s=1/(n-i),l=1/(a-o);t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+r)*u,t[13]=(i+n)*s,t[14]=(o+a)*l,t[15]=1}},{key:"transpose",value:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[3],a=e[6],o=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=a,t[11]=e[14],t[12]=i,t[13]=o,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}},{key:"normalMat3",value:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],l=e[7],f=e[8],c=e[9],h=e[10],d=e[11],m=e[12],v=e[13],p=e[14],y=e[15],g=r*u-n*o,x=r*s-i*o,_=r*l-a*o,T=n*s-i*u,M=n*l-a*u,E=i*l-a*s,A=f*v-c*m,R=f*p-h*m,b=f*y-d*m,w=c*p-h*v,C=c*y-d*v,L=h*y-d*p,P=g*L-x*C+_*w+T*b-M*R+E*A;return P?(P=1/P,t[0]=(u*L-s*C+l*w)*P,t[1]=(s*b-o*L-l*R)*P,t[2]=(o*C-u*b+l*A)*P,t[3]=(i*C-n*L-a*w)*P,t[4]=(r*L-i*b+a*R)*P,t[5]=(n*b-r*C-a*A)*P,t[6]=(v*E-p*M+y*T)*P,t[7]=(p*_-m*E-y*x)*P,t[8]=(m*M-v*_+y*g)*P,t):null}},{key:"multiplyVector",value:function(t,e){var r=e[0],n=e[1],i=e[2],a=e[3],o=t[0],u=t[1],s=t[2],l=t[3],f=t[4],c=t[5],h=t[6],d=t[7],m=t[8],v=t[9],p=t[10],y=t[11],g=t[12],x=t[13],_=t[14],T=t[15];return[r*o+n*f+i*m+a*g,r*u+n*c+i*v+a*x,r*s+n*h+i*p+a*_,r*l+n*d+i*y+a*T]}},{key:"transformVec4",value:function(t,e,r){return t[0]=r[0]*e[0]+r[4]*e[1]+r[8]*e[2]+r[12]*e[3],t[1]=r[1]*e[0]+r[5]*e[1]+r[9]*e[2]+r[13]*e[3],t[2]=r[2]*e[0]+r[6]*e[1]+r[10]*e[2]+r[14]*e[3],t[3]=r[3]*e[0]+r[7]*e[1]+r[11]*e[2]+r[15]*e[3],t}},{key:"mult",value:function(t,e,r){var n=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],l=e[6],f=e[7],c=e[8],h=e[9],d=e[10],m=e[11],v=e[12],p=e[13],y=e[14],g=e[15],x=r[0],_=r[1],T=r[2],M=r[3];return t[0]=x*n+_*u+T*c+M*v,t[1]=x*i+_*s+T*h+M*p,t[2]=x*a+_*l+T*d+M*y,t[3]=x*o+_*f+T*m+M*g,x=r[4],_=r[5],T=r[6],M=r[7],t[4]=x*n+_*u+T*c+M*v,t[5]=x*i+_*s+T*h+M*p,t[6]=x*a+_*l+T*d+M*y,t[7]=x*o+_*f+T*m+M*g,x=r[8],_=r[9],T=r[10],M=r[11],t[8]=x*n+_*u+T*c+M*v,t[9]=x*i+_*s+T*h+M*p,t[10]=x*a+_*l+T*d+M*y,t[11]=x*o+_*f+T*m+M*g,x=r[12],_=r[13],T=r[14],M=r[15],t[12]=x*n+_*u+T*c+M*v,t[13]=x*i+_*s+T*h+M*p,t[14]=x*a+_*l+T*d+M*y,t[15]=x*o+_*f+T*m+M*g,t}},{key:"scale",value:function(t,e,r,n){return t[0]*=e,t[1]*=e,t[2]*=e,t[3]*=e,t[4]*=r,t[5]*=r,t[6]*=r,t[7]*=r,t[8]*=n,t[9]*=n,t[10]*=n,t[11]*=n,t}},{key:"rotateY",value:function(t,e){var r=Math.sin(e),n=Math.cos(e),i=t[0],a=t[1],o=t[2],u=t[3],s=t[8],l=t[9],f=t[10],c=t[11];return t[0]=i*n-s*r,t[1]=a*n-l*r,t[2]=o*n-f*r,t[3]=u*n-c*r,t[8]=i*r+s*n,t[9]=a*r+l*n,t[10]=o*r+f*n,t[11]=u*r+c*n,t}},{key:"rotateX",value:function(t,e){var r=Math.sin(e),n=Math.cos(e),i=t[4],a=t[5],o=t[6],u=t[7],s=t[8],l=t[9],f=t[10],c=t[11];return t[4]=i*n+s*r,t[5]=a*n+l*r,t[6]=o*n+f*r,t[7]=u*n+c*r,t[8]=s*n-i*r,t[9]=l*n-a*r,t[10]=f*n-o*r,t[11]=c*n-u*r,t}},{key:"rotateZ",value:function(t,e){var r=Math.sin(e),n=Math.cos(e),i=t[0],a=t[1],o=t[2],u=t[3],s=t[4],l=t[5],f=t[6],c=t[7];return t[0]=i*n+s*r,t[1]=a*n+l*r,t[2]=o*n+f*r,t[3]=u*n+c*r,t[4]=s*n-i*r,t[5]=l*n-a*r,t[6]=f*n-o*r,t[7]=c*n-u*r,t}},{key:"rotate",value:function(t,e,r){var n=r[0],i=r[1],a=r[2],o=Math.sqrt(n*n+i*i+a*a),u=void 0,s=void 0,l=void 0,f=void 0,c=void 0,h=void 0,d=void 0,m=void 0,v=void 0,p=void 0,y=void 0,g=void 0,x=void 0,_=void 0,T=void 0,M=void 0,E=void 0,A=void 0,R=void 0,b=void 0,w=void 0,C=void 0,L=void 0,P=void 0;return Math.abs(o)<1e-6?null:(o=1/o,n*=o,i*=o,a*=o,u=Math.sin(e),s=Math.cos(e),l=1-s,f=t[0],c=t[1],h=t[2],d=t[3],m=t[4],v=t[5],p=t[6],y=t[7],g=t[8],x=t[9],_=t[10],T=t[11],M=n*n*l+s,E=i*n*l+a*u,A=a*n*l-i*u,R=n*i*l-a*u,b=i*i*l+s,w=a*i*l+n*u,C=n*a*l+i*u,L=i*a*l-n*u,P=a*a*l+s,t[0]=f*M+m*E+g*A,t[1]=c*M+v*E+x*A,t[2]=h*M+p*E+_*A,t[3]=d*M+y*E+T*A,t[4]=f*R+m*b+g*w,t[5]=c*R+v*b+x*w,t[6]=h*R+p*b+_*w,t[7]=d*R+y*b+T*w,t[8]=f*C+m*L+g*P,t[9]=c*C+v*L+x*P,t[10]=h*C+p*L+_*P,void(t[11]=d*C+y*L+T*P))}},{key:"invert",value:function(t,e){void 0===e&&(e=t);var r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],l=e[7],f=e[8],c=e[9],h=e[10],d=e[11],m=e[12],v=e[13],p=e[14],y=e[15],g=r*u-n*o,x=r*s-i*o,_=r*l-a*o,T=n*s-i*u,M=n*l-a*u,E=i*l-a*s,A=f*v-c*m,R=f*p-h*m,b=f*y-d*m,w=c*p-h*v,C=c*y-d*v,L=h*y-d*p,P=g*L-x*C+_*w+T*b-M*R+E*A;return!!P&&(P=1/P,t[0]=(u*L-s*C+l*w)*P,t[1]=(i*C-n*L-a*w)*P,t[2]=(v*E-p*M+y*T)*P,t[3]=(h*M-c*E-d*T)*P,t[4]=(s*b-o*L-l*R)*P,t[5]=(r*L-i*b+a*R)*P,t[6]=(p*_-m*E-y*x)*P,t[7]=(f*E-h*_+d*x)*P,t[8]=(o*C-u*b+l*A)*P,t[9]=(n*b-r*C-a*A)*P,t[10]=(m*M-v*_+y*g)*P,t[11]=(c*_-f*M-d*g)*P,t[12]=(u*R-o*w-s*A)*P,t[13]=(r*w-n*R+i*A)*P,t[14]=(v*x-m*T-p*g)*P,t[15]=(f*T-c*x+h*g)*P,!0)}},{key:"translate",value:function(t,e,r,n){t[12]=t[0]*e+t[4]*r+t[8]*n+t[12],t[13]=t[1]*e+t[5]*r+t[9]*n+t[13],t[14]=t[2]*e+t[6]*r+t[10]*n+t[14],t[15]=t[3]*e+t[7]*r+t[11]*n+t[15]}}]),t}();e.Vector3=a,e.Matrix4=o},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=r(3),o=function(){function t(){n(this,t),this.position=new a.Vector3(0,0,0),this.scale=new a.Vector3(1,1,1),this.rotation=new a.Vector3(0,0,0),this.matView=new a.Matrix4,this.matNormal=new Float32Array(9),this.forward=new Float32Array(4),this.up=new Float32Array(4),this.right=new Float32Array(4)}return i(t,[{key:"updateMatrix",value:function(){return this.matView.reset().vtranslate(this.position).rotateX(this.rotation.x*t.deg2Rad).rotateZ(this.rotation.z*t.deg2Rad).rotateY(this.rotation.y*t.deg2Rad).vscale(this.scale),a.Matrix4.normalMat3(this.matNormal,this.matView.raw),a.Matrix4.transformVec4(this.forward,[0,0,1,0],this.matView.raw),a.Matrix4.transformVec4(this.up,[0,1,0,0],this.matView.raw),a.Matrix4.transformVec4(this.right,[1,0,0,0],this.matView.raw),this.matView.raw}},{key:"updateDirection",value:function(){return a.Matrix4.transformVec4(this.forward,[0,0,1,0],this.matView.raw),a.Matrix4.transformVec4(this.up,[0,1,0,0],this.matView.raw),a.Matrix4.transformVec4(this.right,[1,0,0,0],this.matView.raw),this}},{key:"getViewMatrix",value:function(){return this.matView.raw}},{key:"getNormalMatrix",value:function(){return this.matNormal}},{key:"reset",value:function(){this.position.set(0,0,0),this.scale.set(1,1,1),this.rotation.set(0,0,0)}}]),t}();e.default=o,o.deg2Rad=Math.PI/180},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.CameraController=e.Camera=void 0;var a,o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),u=r(4),s=n(u),l=r(3);!function(t){t[t.FREE=0]="FREE",t[t.ORBIT=1]="ORBIT"}(a||(a={}));var f=function(){function t(e,r,n,a){i(this,t);var o=e.canvas.width/e.canvas.height;this.projectionMatrix=new Float32Array(16),l.Matrix4.perspective(this.projectionMatrix,r||45,o,n||.1,a||100),this.transform=new s.default,this.viewMatrix=new Float32Array(16),this.mode=t.MODE_ORBIT}return o(t,[{key:"panX",value:function(e){this.mode!==t.MODE_ORBIT&&(this.updateViewMatrix(),this.transform.position.x+=this.transform.right[0]*e,this.transform.position.y+=this.transform.right[1]*e,this.transform.position.z+=this.transform.right[2]*e)}},{key:"panY",value:function(e){this.updateViewMatrix(),this.transform.position.y+=this.transform.up[1]*e,this.mode!==t.MODE_ORBIT&&(this.transform.position.x+=this.transform.up[0]*e,this.transform.position.z+=this.transform.up[2]*e)}},{key:"panZ",value:function(e){this.updateViewMatrix(),this.mode===t.MODE_ORBIT?this.transform.position.z+=e:(this.transform.position.x+=this.transform.forward[0]*e,this.transform.position.y+=this.transform.forward[1]*e,this.transform.position.z+=this.transform.forward[2]*e)}},{key:"updateViewMatrix",value:function(){return this.mode===t.MODE_FREE?this.transform.matView.reset().vtranslate(this.transform.position).rotateX(this.transform.rotation.x*s.default.deg2Rad).rotateY(this.transform.rotation.y*s.default.deg2Rad):this.transform.matView.reset().rotateX(this.transform.rotation.x*s.default.deg2Rad).rotateY(this.transform.rotation.y*s.default.deg2Rad).vtranslate(this.transform.position),this.transform.updateDirection(),l.Matrix4.invert(this.viewMatrix,this.transform.matView.raw),this.viewMatrix}},{key:"getMatrix",value:function(t){if(!t){var e=new Float32Array(this.viewMatrix);return e[12]=e[13]=e[14]=0,e}return this.viewMatrix}}]),t}();f.MODE_FREE=a.FREE,f.MODE_ORBIT=a.ORBIT;var c=function(){function t(e,r){i(this,t);var n=this,a=e.canvas.getBoundingClientRect();this.canvas=e.canvas,this.camera=r,this.rotationRate=-300,this.panRate=5,this.zoomRate=200,this.offsetX=a.left,this.offsetY=a.top,this.initX=0,this.initY=0,this.prevX=0,this.prevY=0,this.onUpHandler=function(t){return n.onMouseUp(t)},this.onMoveHandler=function(t){return n.onMouseMove(t)},this.canvas.addEventListener("mousedown",function(t){return n.onMouseDown(t)}),this.canvas.addEventListener("mousewheel",function(t){return n.onMouseWheel(t)}),this.canvas.addEventListener("DOMMouseScroll",function(t){return n.onMouseWheel(t)})}return o(t,[{key:"getMouseVec2",value:function(t){return{x:t.pageX-this.offsetX,y:t.pageY-this.offsetY}}},{key:"onMouseDown",value:function(t){this.initX=this.prevX=t.pageX-this.offsetX,this.initY=this.prevY=t.pageY-this.offsetY,this.canvas.addEventListener("mouseup",this.onUpHandler),this.canvas.addEventListener("mousemove",this.onMoveHandler)}},{key:"onMouseUp",value:function(t){this.canvas.removeEventListener("mouseup",this.onUpHandler),this.canvas.removeEventListener("mousemove",this.onMoveHandler)}},{key:"onMouseWheel",value:function(t){var e=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail));this.camera.panZ(-e*this.zoomRate/this.canvas.height)}},{key:"onMouseMove",value:function(t){var e=t.pageX-this.offsetX,r=t.pageY-this.offsetY,n=e-this.prevX,i=r-this.prevY;t.shiftKey?(this.camera.panX(-n*this.panRate/this.canvas.width),this.camera.panY(-i*this.panRate/this.canvas.height)):(this.camera.transform.rotation.y+=n*this.rotationRate/this.canvas.width,this.camera.transform.rotation.x+=i*this.rotationRate/this.canvas.height),this.prevX=e,this.prevY=r}}]),t}();e.Camera=f,e.CameraController=c},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0}),e.Cube=e.MultiQuad=e.Quad=e.GridAxis=void 0;var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=r(0),u=r(1),s=n(u),l=function(){function t(){i(this,t)}return a(t,null,[{key:"createModel",value:function(e,r){return new s.default(t.createMesh(e,r))}},{key:"createMesh",value:function(t,e){for(var r=[],n=1.8,i=10,a=n/i,u=n/2,s=void 0,l=0;l<=i;l++)s=-u+l*a,r.push(s),r.push(0),r.push(u),r.push(0),r.push(s),r.push(0),r.push(-u),r.push(0),s=u-l*a,r.push(-u),r.push(0),r.push(s),r.push(0),r.push(u),r.push(0),r.push(s),r.push(0);e&&(r.push(-1.1),r.push(-0),r.push(0),r.push(1),r.push(1.1),r.push(0),r.push(0),r.push(1),r.push(0),r.push(-1.1),r.push(0),r.push(2),r.push(0),r.push(1.1),r.push(0),r.push(2),r.push(0),r.push(0),r.push(-1.1),r.push(3),r.push(0),r.push(0),r.push(1.1),r.push(3));var f=4,c={drawMode:t.LINES,vao:t.createVertexArray(),vertexComponentLen:-1,vertexCount:-1,bufVertices:t.createBuffer()},h=void 0;return c.vertexComponentLen=4,c.vertexCount=r.length/c.vertexComponentLen,h=Float32Array.BYTES_PER_ELEMENT*c.vertexComponentLen,t.bindVertexArray(c.vao),t.bindBuffer(t.ARRAY_BUFFER,c.bufVertices),t.bufferData(t.ARRAY_BUFFER,new Float32Array(r),t.STATIC_DRAW),t.enableVertexAttribArray(o.ATTR_POSITION_LOC),t.enableVertexAttribArray(f),t.vertexAttribPointer(o.ATTR_POSITION_LOC,3,t.FLOAT,!1,h,0),t.vertexAttribPointer(f,1,t.FLOAT,!1,h,3*Float32Array.BYTES_PER_ELEMENT),t.bindVertexArray(null),t.bindBuffer(t.ARRAY_BUFFER,null),t.mMeshCache.grid=c,c}}]),t}(),f=function(){function t(){i(this,t)}return a(t,null,[{key:"createModel",value:function(e){return new s.default(t.createMesh(e))}},{key:"createMesh",value:function(t){var e=[-.5,.5,0,-.5,-.5,0,.5,-.5,0,.5,.5,0],r=[0,0,0,1,1,1,1,0],n=[0,1,2,2,3,0],i=t.fCreateMeshVAO("Quad",n,e,null,r);return i.noCulling=!0,i.doBlending=!0,i}}]),t}(),c=function(){function t(){i(this,t)}return a(t,null,[{key:"createModel",value:function(e){return new s.default(t.createMesh(e))}},{key:"createMesh",value:function(t){for(var e=[],r=[],n=[],i=0;i<50;i++){var a=.2+.8*Math.random(),o=.5*a,u=2*Math.PI*Math.random(),s=o*Math.cos(u),l=o*Math.sin(u),f=-2.5+5*Math.random(),c=-2.5+5*Math.random(),h=-2.5+5*Math.random(),d=4*i;n.push(f-s,c+o,h-l),n.push(f-s,c-o,h-l),n.push(f+s,c-o,h+l),n.push(f+s,c+o,h+l),r.push(0,0,0,1,1,1,1,0),e.push(d,d+1,d+2,d+2,d+3,d)}var m=t.fCreateMeshVAO("MultiQuad",e,n,null,r);return m.noCulling=!0,m.doBlending=!0,m}}]),t}(),h=function(){function t(){i(this,t)}return a(t,null,[{key:"createModel",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Cube";return new s.default(t.createMesh(e,r,1,1,1,0,0,0))}},{key:"createMesh",value:function(t,e,r,n,i,a,o,u){for(var s=.5*r,l=.5*n,f=.5*i,c=a-s,h=a+s,d=o-l,m=o+l,v=u-f,p=u+f,y=[c,m,p,0,c,d,p,0,h,d,p,0,h,m,p,0,h,m,v,1,h,d,v,1,c,d,v,1,c,m,v,1,c,m,v,2,c,d,v,2,c,d,p,2,c,m,p,2,c,d,p,3,c,d,v,3,h,d,v,3,h,d,p,3,h,m,p,4,h,d,p,4,h,d,v,4,h,m,v,4,c,m,v,5,c,m,p,5,h,m,p,5,h,m,v,5],g=[],x=0;x<y.length/4;x+=2)g.push(x,x+1,4*Math.floor(x/4)+(x+2)%4);for(var _=[],T=0;T<6;T++)_.push(0,0,0,1,1,1,1,0);var M=[0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0],E=t.fCreateMeshVAO(e,g,y,M,_,4);return E.noCulling=!0,E}}]),t}();e.GridAxis=l,e.Quad=f,e.MultiQuad=c,e.Cube=h},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),a=1e3,o=function(){function t(e,r){function i(){var t=performance.now(),e=t-u.msLastFrame,r=e/a;e>=u.msFpsLimit&&(u.fps=Math.floor(1/r),u.msLastFrame=t,u.callback(r)),u.isActive&&window.requestAnimationFrame(u.run)}function o(){var t=performance.now(),e=(t-u.msLastFrame)/a;u.fps=Math.floor(1/e),u.msLastFrame=t,u.callback(e),u.isActive&&window.requestAnimationFrame(u.run)}n(this,t);var u=this;this.msLastFrame=null,this.callback=e,this.isActive=!1,this.fps=0,void 0!==r&&r>0?(this.msFpsLimit=a/r,this.run=i):this.run=o}return i(t,[{key:"start",value:function(){return this.isActive=!0,this.msLastFrame=performance.now(),window.requestAnimationFrame(this.run),this}},{key:"stop",value:function(){this.isActive=!1}}]),t}();e.default=o},function(t,e,r){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){var e=document.getElementById(t),r=e.getContext("webgl2");if(!r)throw Error("WebGL context is not available.");return r.mMeshCache={},r.mTextureCache={},r.cullFace(r.BACK),r.frontFace(r.CCW),r.enable(r.DEPTH_TEST),r.enable(r.CULL_FACE),r.depthFunc(r.LEQUAL),r.blendFunc(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA),r.clearColor(1,1,1,1),r.fClear=function(){return r.clear(r.COLOR_BUFFER_BIT|r.DEPTH_BUFFER_BIT),r},r.fCreateArrayBuffer=function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=r.createBuffer();return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,t,e?r.STATIC_DRAW:r.DYNAMIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,null),n},r.fCreateMeshVAO=function(t,e,n,i,a,u){var s={drawMode:r.TRIANGLES};return s.vao=r.createVertexArray(),r.bindVertexArray(s.vao),n&&(s.bufVertices=r.createBuffer(),s.vertexComponentLen=u||3,s.vertexCount=n.length/s.vertexComponentLen,r.bindBuffer(r.ARRAY_BUFFER,s.bufVertices),r.bufferData(r.ARRAY_BUFFER,new Float32Array(n),r.STATIC_DRAW),r.enableVertexAttribArray(o.ATTR_POSITION_LOC),r.vertexAttribPointer(o.ATTR_POSITION_LOC,s.vertexComponentLen,r.FLOAT,!1,0,0)),i&&(s.bufNormals=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,s.bufNormals),r.bufferData(r.ARRAY_BUFFER,new Float32Array(i),r.STATIC_DRAW),r.enableVertexAttribArray(o.ATTR_NORMAL_LOC),r.vertexAttribPointer(o.ATTR_NORMAL_LOC,3,r.FLOAT,!1,0,0)),a&&(s.bufUvs=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,s.bufUvs),r.bufferData(r.ARRAY_BUFFER,new Float32Array(a),r.STATIC_DRAW),r.enableVertexAttribArray(o.ATTR_UV_LOC),r.vertexAttribPointer(o.ATTR_UV_LOC,2,r.FLOAT,!1,0,0)),e&&(s.bufIndex=r.createBuffer(),s.indexCount=e.length,r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,s.bufIndex),r.bufferData(r.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),r.STATIC_DRAW)),r.bindVertexArray(null),r.bindBuffer(r.ARRAY_BUFFER,null),null!==e&&void 0!==e&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,null),r.mMeshCache[t]=s,s},r.fLoadTexture=function(t,e,n){var i=r.createTexture();return n&&r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,1),r.bindTexture(r.TEXTURE_2D,i),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_NEAREST),r.generateMipmap(r.TEXTURE_2D),r.bindTexture(r.TEXTURE_2D,null),r.mTextureCache[t]=i,n&&r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,0),i},r.fLoadCubeMap=function(t,e){if(6!==e.length)return null;var n=r.createTexture();r.bindTexture(r.TEXTURE_CUBE_MAP,n);for(var i=0;i<6;i++)r.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e[i]);return r.texParameteri(r.TEXTURE_CUBE_MAP,r.TEXTURE_MAG_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_CUBE_MAP,r.TEXTURE_MIN_FILTER,r.LINEAR),r.texParameteri(r.TEXTURE_CUBE_MAP,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_CUBE_MAP,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_CUBE_MAP,r.TEXTURE_WRAP_R,r.CLAMP_TO_EDGE),r.bindTexture(r.TEXTURE_CUBE_MAP,null),r.mTextureCache[t]=n,n},r.fSetSize=function(t,e){return r.canvas.style.width=t+"px",r.canvas.style.height=e+"px",r.canvas.width=t,r.canvas.height=e,r.viewport(0,0,t,e),r},r.fFitScreen=function(t,e){return r.fSetSize(window.innerWidth*(t||1),window.innerHeight*(e||1))},r}Object.defineProperty(e,"__esModule",{value:!0}),e.GLUtil=void 0;var a=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();e.default=i;var o=r(0),u=function(){function t(){n(this,t)}return a(t,null,[{key:"rgbArray",value:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return 0===e.length?null:e.reduce(function(t,e){return t.push((16711680&e)>>>16,(65280&e)>>>8,255&e),t},[])}}]),t}();e.GLUtil=u},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var u=r(2),s=r(29),l=n(s),f=r(28),c=n(f),h=function(t){function e(t,r){i(this,e);var n=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,l.default,c.default));n.setPerspective(r);var o=t.getUniformLocation(n.program,"uColor");return t.uniform3fv(o,[.8,.8,.8,1,0,0,0,1,0,0,0,1]),t.useProgram(null),n}return o(e,t),e}(u.Shader);e.default=h},function(t,e){},function(t,e,r){t.exports=r.p+"interstellar_01.png"},function(t,e,r){t.exports=r.p+"interstellar_02.png"},function(t,e,r){t.exports=r.p+"interstellar_03.png"},function(t,e,r){t.exports=r.p+"interstellar_04.png"},function(t,e,r){t.exports=r.p+"interstellar_05.png"},function(t,e,r){t.exports=r.p+"interstellar_06.png"},function(t,e,r){t.exports=r.p+"miramar_01.png"},function(t,e,r){t.exports=r.p+"miramar_02.png"},function(t,e,r){t.exports=r.p+"miramar_03.png"},function(t,e,r){t.exports=r.p+"miramar_04.png"},function(t,e,r){t.exports=r.p+"miramar_05.png"},function(t,e,r){t.exports=r.p+"miramar_06.png"},function(t,e,r){t.exports=r.p+"uvgrid01.jpg"},function(t,e){t.exports="#version 300 es\r\nprecision mediump float;\r\n\r\nin vec4 color;\r\nin highp vec2 texCoord;\r\nuniform sampler2D uMainTex;\r\n\r\nout vec4 finalColor;\r\n\r\nvoid main(void) {\r\n  // finalColor = color;\r\n  // finalColor = texture(uMainTex, texCoord);\r\n  finalColor = mix(color, texture(uMainTex, texCoord), 0.8f);\r\n}\r\n"},function(t,e){t.exports="#version 300 es\r\nprecision mediump float;\r\n\r\nin highp vec3 texCoord;\r\nuniform samplerCube uDayTex;\r\nuniform samplerCube uNightTex;\r\nuniform float uTime;\r\n\r\nout vec4 finalColor;\r\nvoid main(void){\r\n  finalColor = mix( texture(uDayTex, texCoord), texture(uNightTex, texCoord), abs(sin(uTime * 0.0001)) );\r\n}\r\n"},function(t,e){t.exports="#version 300 es\r\nin vec4 a_position;\r\nin vec2 a_uv;\r\n\r\nuniform mat4 uPMatrix;\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nout highp vec3 texCoord;  //Interpolate UV values to the fragment shader\r\n\r\nvoid main(void){\r\n  texCoord = a_position.xyz;\r\n  gl_Position = uPMatrix * uCameraMatrix * vec4(a_position.xyz, 1.0); \r\n}\r\n"},function(t,e){t.exports="#version 300 es\r\nin vec4 a_position; // Standard position data\r\nin vec3 a_norm;\r\nin vec2 a_uv;\r\n\r\nuniform mat4 uPMatrix;\r\nuniform mat4 uMVMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nuniform vec3 uColor[6];\r\nuniform float uTime;\r\n\r\nout lowp vec4 color;\r\nout highp vec2 texCoord;\r\n\r\nvoid main(void) {\r\n  texCoord = a_uv;\r\n  color = vec4(uColor[int(a_position.w)], 1.0);\r\n  gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position.xyz, 1.0);\r\n}\r\n"},function(t,e){t.exports="#version 300 es\nprecision mediump float;\n\nin vec4 color;\nout vec4 finalColor;\n\nvoid main(void){\n  finalColor = color;\n}\n"},function(t,e){t.exports="#version 300 es\nin vec3 a_position; // Standard position data\n\nlayout(location=4) in float a_color; // Will hold the 4th custom position of the custom position buffer\n\nuniform mat4 uPMatrix;\nuniform mat4 uMVMatrix;\nuniform mat4 uCameraMatrix;\n\nuniform vec3 uColor[4]; // Color array\n\nout lowp vec4 color; // Color to send to fragment shader\n\nvoid main(void){\n  color = vec4(uColor[ int(a_color) ], 1.0); // Using the 4th float as a color index\n  gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\n}\n";
},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var u=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();r(10),r(23),r(17),r(18),r(19),r(20),r(21),r(22),r(11),r(12),r(13),r(14),r(15),r(16);var s=r(8),l=n(s),f=r(2),c=r(7),h=n(c),d=r(1),m=n(d),v=r(5),p=r(9),y=n(p),g=r(26),x=n(g),_=r(25),T=n(_),M=r(27),E=n(M),A=r(24),R=n(A),b=r(6);window.addEventListener("load",function(){function t(){e&&(r.updateViewMatrix(),e.fClear(),o.activate().preRender().setCameraMatrix(r.getMatrix(!1)).setTime(performance.now()).renderModel(u),i.activate().setCameraMatrix(r.viewMatrix).renderModel(a.preRender()),s.activate().preRender().setCameraMatrix(r.viewMatrix).setTime(performance.now()).renderModel(f.preRender()))}var e=void 0,r=void 0,n=void 0,i=void 0,a=void 0,o=void 0,u=void 0,s=void 0,f=void 0;e=(0,l.default)("glcanvas"),e&&(e.fFitScreen(.95,.95).fClear(),r=new v.Camera(e),r.transform.position.set(0,1,3),n=new v.CameraController(e,r),e.fLoadTexture("tex001",document.getElementById("imgTex")),e.fLoadCubeMap("skybox01",[document.getElementById("imgDay01"),document.getElementById("imgDay02"),document.getElementById("imgDay03"),document.getElementById("imgDay04"),document.getElementById("imgDay05"),document.getElementById("imgDay06")]),e.fLoadCubeMap("skybox02",[document.getElementById("imgSpace01"),document.getElementById("imgSpace02"),document.getElementById("imgSpace03"),document.getElementById("imgSpace04"),document.getElementById("imgSpace05"),document.getElementById("imgSpace06")]),i=new y.default(e,r.projectionMatrix),a=b.GridAxis.createModel(e,!1),s=new w(e,r.projectionMatrix).setTexture(e.mTextureCache.tex001),f=b.Cube.createModel(e),f.setPosition(0,.6,0),u=new m.default(b.Cube.createMesh(e,"Skymap",10,10,10,0,0,0)),o=new C(e,r.projectionMatrix,e.mTextureCache.skybox01,e.mTextureCache.skybox02),new h.default(t).start())});var w=function(t){function e(t,r){i(this,e);var n=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,E.default,R.default));n.uniformLoc.time=t.getUniformLocation(n.program,"uTime");var o=t.getUniformLocation(n.program,"uColor"),u=s.GLUtil.rgbArray(16711680,65280,255,16776960,65535,16711935);if(!u)throw TypeError("[TestShader][constructor] colorArray cannot be empty");return t.uniform3fv(o,new Float32Array(u)),n.setPerspective(r),n.mainTexture=-1,t.useProgram(null),n}return o(e,t),u(e,[{key:"setTime",value:function(t){return this.gl.uniform1f(this.uniformLoc.time,t),this}},{key:"setTexture",value:function(t){return t&&(this.mainTexture=t),this}},{key:"preRender",value:function(){return this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.mainTexture),this.gl.uniform1i(this.uniformLoc.mainTexture,0),this}}]),e}(f.Shader),C=function(t){function e(t,r,n,o){i(this,e);var u=a(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,x.default,T.default));return u.uniformLoc.time=t.getUniformLocation(u.program,"uTime"),u.uniformLoc.dayTex=t.getUniformLocation(u.program,"uDayTex"),u.uniformLoc.nightTex=t.getUniformLocation(u.program,"uNightTex"),u.setPerspective(r),u.texDay=n,u.texNight=o,t.useProgram(null),u}return o(e,t),u(e,[{key:"setTime",value:function(t){return this.gl.uniform1f(this.uniformLoc.time,t),this}},{key:"preRender",value:function(){return this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.texDay),this.gl.uniform1i(this.uniformLoc.dayTex,0),this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,this.texNight),this.gl.uniform1i(this.uniformLoc.nightTex,1),this}}]),e}(f.Shader)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,