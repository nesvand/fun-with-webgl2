{"version":3,"sources":["webpack:///app-e245f85efcc40040a1ee.js","webpack:///webpack/bootstrap e245f85efcc40040a1ee"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","eval"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,KACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,KAGAF,EAAAD,QAvBA,GAAAD,KA4BAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAK,EAAA,SAAAK,GAA2C,MAAAA,IAG3CV,EAAAW,EAAA,SAAAR,EAAAS,EAAAC,GACAb,EAAAc,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,gBACAC,cACAC,IAAAN,KAMAb,EAAAoB,EAAA,SAAAhB,GACA,GAAAS,GAAAT,KAAAiB,WACA,WAA2B,MAAAjB,GAAAkB,SAC3B,WAAiC,MAAAlB,GAEjC,OADAJ,GAAAW,EAAAE,EAAA,IAAAA,GACAA,GAIAb,EAAAc,EAAA,SAAAS,EAAAC,GAAsD,MAAAT,QAAAU,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAGA3B,IAAA4B,EAAA,MDMM,SAAUxB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,+oqCAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,s4WAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,6+sDAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,mr2EAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,611BAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,6tyBAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,24wCAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,2iUAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,0rSAIC,SAAUzB,OAAQD,SAExB0B,KAAK,sfAIC,SAAUzB,OAAQD,QAASH,qBAEjC6B,KAAK,ijBAIC,SAAUzB,OAAQD,SAExB0B,KAAK,y8BAIC,SAAUzB,OAAQD,SAExB0B,KAAK,mwCAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK,wxNAIC,SAAUzB,OAAQD,QAASH,qBAEjC,YACA6B,MAAK","file":"app-e245f85efcc40040a1ee.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 14);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nexports.GLInstance = GLInstance;\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n//--------------------------------------------------\\n// Global Constants\\n//--------------------------------------------------\\n//--------------------------------------------------\\nvar ATTR_POSITION_NAME = exports.ATTR_POSITION_NAME = 'a_position';\\nvar ATTR_POSITION_LOC = exports.ATTR_POSITION_LOC = 0;\\nvar ATTR_NORMAL_NAME = exports.ATTR_NORMAL_NAME = 'a_norm';\\nvar ATTR_NORMAL_LOC = exports.ATTR_NORMAL_LOC = 1;\\nvar ATTR_UV_NAME = exports.ATTR_UV_NAME = 'a_uv';\\nvar ATTR_UV_LOC = exports.ATTR_UV_LOC = 2;\\n//--------------------------------------------------\\n// Util  Class\\n//--------------------------------------------------\\n\\nvar GlUtil = exports.GlUtil = function () {\\n    function GlUtil() {\\n        _classCallCheck(this, GlUtil);\\n    }\\n\\n    _createClass(GlUtil, null, [{\\n        key: 'rgbArray',\\n\\n        //Convert Hex colors to float arrays, can batch process a list into one big array.\\n        //example : GlUtil.rgbArray(\\\"#FF0000\\\",\\\"00FF00\\\",\\\"#0000FF\\\");\\n        value: function rgbArray() {\\n            if (arguments.length == 0) return null;\\n            var rtn = [];\\n            for (var i = 0, c, p; i < arguments.length; i++) {\\n                if (arguments[i].length < 6) continue;\\n                c = arguments[i]; //Just an alias(copy really) of the color text, make code smaller.\\n                p = c[0] == '#' ? 1 : 0; //Determine starting position in char array to start pulling from\\n                rtn.push(parseInt(c[p] + c[p + 1], 16) / 255.0, parseInt(c[p + 2] + c[p + 3], 16) / 255.0, parseInt(c[p + 4] + c[p + 5], 16) / 255.0);\\n            }\\n            return rtn;\\n        }\\n    }]);\\n\\n    return GlUtil;\\n}();\\n//--------------------------------------------------\\n// Custom GL Context Object\\n//--------------------------------------------------\\n\\n\\nfunction GLInstance(canvasID) {\\n    var canvas = document.getElementById(canvasID);\\n    var gl = canvas.getContext('webgl2');\\n    if (!gl) {\\n        console.error('WebGL context is not available.');\\n        return null;\\n    }\\n    //...................................................\\n    //Setup custom properties\\n    gl.mMeshCache = []; //Cache all the mesh structs, easy to unload buffers if they all exist in one place.\\n    gl.mTextureCache = [];\\n    //...................................................\\n    //Setup GL, Set all the default configurations we need.\\n    gl.cullFace(gl.BACK); //Back is also default\\n    gl.frontFace(gl.CCW); //Dont really need to set it, its ccw by default.\\n    gl.enable(gl.DEPTH_TEST); //Shouldn't use this, use something else to add depth detection\\n    gl.enable(gl.CULL_FACE); //Cull back face, so only show triangles that are created clockwise\\n    gl.depthFunc(gl.LEQUAL); //Near things obscure far things\\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); //Setup default alpha blending\\n    gl.clearColor(1.0, 1.0, 1.0, 1.0); //Set clear color\\n    //...................................................\\n    //Methods\\n    //Reset the canvas with our set background color.\\n    gl.fClear = function () {\\n        this.clear(this.COLOR_BUFFER_BIT | this.DEPTH_BUFFER_BIT);return this;\\n    };\\n    //Create and fill our Array buffer.\\n    gl.fCreateArrayBuffer = function (floatAry, isStatic) {\\n        if (isStatic === undefined) isStatic = true; //So we can call this function without setting isStatic\\n        var buf = this.createBuffer();\\n        this.bindBuffer(this.ARRAY_BUFFER, buf);\\n        this.bufferData(this.ARRAY_BUFFER, floatAry, isStatic ? this.STATIC_DRAW : this.DYNAMIC_DRAW);\\n        this.bindBuffer(this.ARRAY_BUFFER, null);\\n        return buf;\\n    };\\n    //Turns arrays into GL buffers, then setup a VAO that will predefine the buffers to standard shader attributes.\\n    gl.fCreateMeshVAO = function (name, aryInd, aryVert, aryNorm, aryUV, vertLen) {\\n        var rtn = { drawMode: this.TRIANGLES };\\n        //Create and bind vao\\n        rtn.vao = this.createVertexArray();\\n        this.bindVertexArray(rtn.vao); //Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\\n        //.......................................................\\n        //Set up vertices\\n        if (aryVert !== undefined && aryVert != null) {\\n            rtn.bufVertices = this.createBuffer(); //Create buffer...\\n            rtn.vertexComponentLen = vertLen || 3; //How many floats make up a vertex\\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen; //How many vertices in the array\\n            this.bindBuffer(this.ARRAY_BUFFER, rtn.bufVertices);\\n            this.bufferData(this.ARRAY_BUFFER, new Float32Array(aryVert), this.STATIC_DRAW); //then push array into it.\\n            this.enableVertexAttribArray(ATTR_POSITION_LOC); //Enable Attribute location\\n            //this.vertexAttribPointer(ATTR_POSITION_LOC,3,this.FLOAT,false,0,0);\\t\\t\\t\\t\\t\\t//Put buffer at location of the vao\\\\\\n            this.vertexAttribPointer(ATTR_POSITION_LOC, rtn.vertexComponentLen, this.FLOAT, false, 0, 0); //Put buffer at location of the vao\\n        }\\n        //.......................................................\\n        //Setup normals\\n        if (aryNorm !== undefined && aryNorm != null) {\\n            rtn.bufNormals = this.createBuffer();\\n            this.bindBuffer(this.ARRAY_BUFFER, rtn.bufNormals);\\n            this.bufferData(this.ARRAY_BUFFER, new Float32Array(aryNorm), this.STATIC_DRAW);\\n            this.enableVertexAttribArray(ATTR_NORMAL_LOC);\\n            this.vertexAttribPointer(ATTR_NORMAL_LOC, 3, this.FLOAT, false, 0, 0);\\n        }\\n        //.......................................................\\n        //Setup UV\\n        if (aryUV !== undefined && aryUV != null) {\\n            rtn.bufUV = this.createBuffer();\\n            this.bindBuffer(this.ARRAY_BUFFER, rtn.bufUV);\\n            this.bufferData(this.ARRAY_BUFFER, new Float32Array(aryUV), this.STATIC_DRAW);\\n            this.enableVertexAttribArray(ATTR_UV_LOC);\\n            this.vertexAttribPointer(ATTR_UV_LOC, 2, this.FLOAT, false, 0, 0); //UV only has two floats per component\\n        }\\n        //.......................................................\\n        //Setup Index.\\n        if (aryInd !== undefined && aryInd != null) {\\n            rtn.bufIndex = this.createBuffer();\\n            rtn.indexCount = aryInd.length;\\n            this.bindBuffer(this.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\\n            this.bufferData(this.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), this.STATIC_DRAW);\\n            //this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,null); //TODO REMOVE THIS AND ADD TO CLEANUP\\n        }\\n        //Clean up\\n        this.bindVertexArray(null); //Unbind the VAO, very Important. always unbind when your done using one.\\n        this.bindBuffer(this.ARRAY_BUFFER, null); //Unbind any buffers that might be set\\n        if (aryInd != null && aryInd !== undefined) this.bindBuffer(this.ELEMENT_ARRAY_BUFFER, null);\\n        this.mMeshCache[name] = rtn;\\n        return rtn;\\n    };\\n    gl.fLoadTexture = function (name, img, doYFlip) {\\n        var tex = this.createTexture();\\n        if (doYFlip == true) this.pixelStorei(this.UNPACK_FLIP_Y_WEBGL, true); //Flip the texture by the Y Position, So 0,0 is bottom left corner.\\n        this.bindTexture(this.TEXTURE_2D, tex); //Set text buffer for work\\n        this.texImage2D(this.TEXTURE_2D, 0, this.RGBA, this.RGBA, this.UNSIGNED_BYTE, img); //Push image to GPU.\\n        this.texParameteri(this.TEXTURE_2D, this.TEXTURE_MAG_FILTER, this.LINEAR); //Setup up scaling\\n        this.texParameteri(this.TEXTURE_2D, this.TEXTURE_MIN_FILTER, this.LINEAR_MIPMAP_NEAREST); //Setup down scaling\\n        this.generateMipmap(this.TEXTURE_2D); //Precalc different sizes of texture for better quality rendering.\\n        this.bindTexture(this.TEXTURE_2D, null); //Unbind\\n        this.mTextureCache[name] = tex; //Save ID for later unloading\\n        if (doYFlip == true) this.pixelStorei(this.UNPACK_FLIP_Y_WEBGL, false); //Stop flipping textures\\n        return tex;\\n    };\\n    //imgAry must be 6 elements long and images placed in the right order\\n    //RIGHT,LEFT,TOP,BOTTOM,BACK,FRONT\\n    gl.fLoadCubeMap = function (name, imgAry) {\\n        if (imgAry.length != 6) return null;\\n        //Cube Constants values increment, so easy to start with right and just add 1 in a loop\\n        //To make the code easier costs by making the imgAry coming into the function to have\\n        //the images sorted in the same way the constants are set.\\n        //\\tTEXTURE_CUBE_MAP_POSITIVE_X - Right\\t:: TEXTURE_CUBE_MAP_NEGATIVE_X - Left\\n        //\\tTEXTURE_CUBE_MAP_POSITIVE_Y - Top \\t:: TEXTURE_CUBE_MAP_NEGATIVE_Y - Bottom\\n        //\\tTEXTURE_CUBE_MAP_POSITIVE_Z - Back\\t:: TEXTURE_CUBE_MAP_NEGATIVE_Z - Front\\n        var tex = this.createTexture();\\n        this.bindTexture(this.TEXTURE_CUBE_MAP, tex);\\n        //push image to specific spot in the cube map.\\n        for (var i = 0; i < 6; i++) {\\n            this.texImage2D(this.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, this.RGBA, this.RGBA, this.UNSIGNED_BYTE, imgAry[i]);\\n        }\\n        this.texParameteri(this.TEXTURE_CUBE_MAP, this.TEXTURE_MAG_FILTER, this.LINEAR); //Setup up scaling\\n        this.texParameteri(this.TEXTURE_CUBE_MAP, this.TEXTURE_MIN_FILTER, this.LINEAR); //Setup down scaling\\n        this.texParameteri(this.TEXTURE_CUBE_MAP, this.TEXTURE_WRAP_S, this.CLAMP_TO_EDGE); //Stretch image to X position\\n        this.texParameteri(this.TEXTURE_CUBE_MAP, this.TEXTURE_WRAP_T, this.CLAMP_TO_EDGE); //Stretch image to Y position\\n        this.texParameteri(this.TEXTURE_CUBE_MAP, this.TEXTURE_WRAP_R, this.CLAMP_TO_EDGE); //Stretch image to Z position\\n        //this.generateMipmap(this.TEXTURE_CUBE_MAP);\\n        this.bindTexture(this.TEXTURE_CUBE_MAP, null);\\n        this.mTextureCache[name] = tex;\\n        return tex;\\n    };\\n    //...................................................\\n    //Setters - Getters\\n    //Set the size of the canvas html element and the rendering view port\\n    gl.fSetSize = function (w, h) {\\n        //set the size of the canvas, on chrome we need to set it 3 ways to make it work perfectly.\\n        this.canvas.style.width = w + 'px';\\n        this.canvas.style.height = h + 'px';\\n        this.canvas.width = w;\\n        this.canvas.height = h;\\n        //when updating the canvas size, must reset the viewport of the canvas\\n        //else the resolution webgl renders at will not change\\n        this.viewport(0, 0, w, h);\\n        return this;\\n    };\\n    //Set the size of the canvas to fill a % of the total screen.\\n    gl.fFitScreen = function (wp, hp) {\\n        return this.fSetSize(window.innerWidth * (wp || 1), window.innerHeight * (hp || 1));\\n    };\\n    return gl;\\n}\\nexports.default = {\\n    ATTR_POSITION_NAME: ATTR_POSITION_NAME,\\n    ATTR_POSITION_LOC: ATTR_POSITION_LOC,\\n    ATTR_NORMAL_NAME: ATTR_NORMAL_NAME,\\n    ATTR_NORMAL_LOC: ATTR_NORMAL_LOC,\\n    ATTR_UV_NAME: ATTR_UV_NAME,\\n    ATTR_UV_LOC: ATTR_UV_LOC,\\n    GLInstance: GLInstance,\\n    GlUtil: GlUtil\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.Transform = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Math = __webpack_require__(3);\\n\\nvar MATH = _interopRequireWildcard(_Math);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Vector3 = MATH.Vector3,\\n    Matrix4 = MATH.Matrix4;\\n\\nvar Transform = exports.Transform = function () {\\n    function Transform() {\\n        _classCallCheck(this, Transform);\\n\\n        //transform vectors\\n        this.position = new Vector3(0, 0, 0); //Traditional X,Y,Z 3d position\\n        this.scale = new Vector3(1, 1, 1); //How much to scale a mesh. Having a 1 means no scaling is done.\\n        this.rotation = new Vector3(0, 0, 0); //Hold rotation values based on degrees, Object will translate it to radians\\n        this.matView = new Matrix4(); //Cache the results when calling updateMatrix\\n        this.matNormal = new Float32Array(9); //This is a Mat3, raw array to hold the values is enough for what its used for\\n        //Direction Vectors, Need 4 elements for math operations with matrices\\n        this.forward = new Float32Array(4); //When rotating, keep track of what the forward direction is\\n        this.up = new Float32Array(4); //what the up direction is, invert to get bottom\\n        this.right = new Float32Array(4); //what the right direction is, invert to get left\\n    }\\n    //--------------------------------------------------------------------------\\n    //Methods\\n\\n\\n    _createClass(Transform, [{\\n        key: 'updateMatrix',\\n        value: function updateMatrix() {\\n            this.matView.reset() //Order is very important!!\\n            .vtranslate(this.position).rotateX(this.rotation.x * Transform.deg2Rad).rotateZ(this.rotation.z * Transform.deg2Rad).rotateY(this.rotation.y * Transform.deg2Rad).vscale(this.scale);\\n            //Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\\n            Matrix4.normalMat3(this.matNormal, this.matView.raw);\\n            //Determine Direction after all the transformations.\\n            Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw); //Z\\n            Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw); //Y\\n            Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw); //X\\n            return this.matView.raw;\\n        }\\n    }, {\\n        key: 'updateDirection',\\n        value: function updateDirection() {\\n            Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw);\\n            Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw);\\n            Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw);\\n            return this;\\n        }\\n    }, {\\n        key: 'getViewMatrix',\\n        value: function getViewMatrix() {\\n            return this.matView.raw;\\n        }\\n    }, {\\n        key: 'getNormalMatrix',\\n        value: function getNormalMatrix() {\\n            return this.matNormal;\\n        }\\n    }, {\\n        key: 'reset',\\n        value: function reset() {\\n            this.position.set(0, 0, 0);\\n            this.scale.set(1, 1, 1);\\n            this.rotation.set(0, 0, 0);\\n        }\\n    }]);\\n\\n    return Transform;\\n}();\\n\\nTransform.deg2Rad = Math.PI / 180; //Cache result, one less operation to do for each update.\\nexports.default = {\\n    Transform: Transform\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL1RyYW5zZm9ybS50cz84M2E0Il0sIm5hbWVzIjpbIk1BVEgiLCJWZWN0b3IzIiwiTWF0cml4NCIsIlRyYW5zZm9ybSIsInBvc2l0aW9uIiwic2NhbGUiLCJyb3RhdGlvbiIsIm1hdFZpZXciLCJtYXROb3JtYWwiLCJGbG9hdDMyQXJyYXkiLCJmb3J3YXJkIiwidXAiLCJyaWdodCIsInJlc2V0IiwidnRyYW5zbGF0ZSIsInJvdGF0ZVgiLCJ4IiwiZGVnMlJhZCIsInJvdGF0ZVoiLCJ6Iiwicm90YXRlWSIsInkiLCJ2c2NhbGUiLCJub3JtYWxNYXQzIiwicmF3IiwidHJhbnNmb3JtVmVjNCIsInNldCIsIk1hdGgiLCJQSSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0lBQVlBLEk7Ozs7OztJQUNKQyxPLEdBQXFCRCxJLENBQXJCQyxPO0lBQVNDLE8sR0FBWUYsSSxDQUFaRSxPOztJQUNKQyxTLFdBQUFBLFM7QUFDVCx5QkFBYztBQUFBOztBQUNWO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQixJQUFJSCxPQUFKLENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsQ0FBaEIsQ0FGVSxDQUU0QjtBQUN0QyxhQUFLSSxLQUFMLEdBQWEsSUFBSUosT0FBSixDQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCLENBQWIsQ0FIVSxDQUd5QjtBQUNuQyxhQUFLSyxRQUFMLEdBQWdCLElBQUlMLE9BQUosQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixDQUFoQixDQUpVLENBSTRCO0FBQ3RDLGFBQUtNLE9BQUwsR0FBZSxJQUFJTCxPQUFKLEVBQWYsQ0FMVSxDQUtvQjtBQUM5QixhQUFLTSxTQUFMLEdBQWlCLElBQUlDLFlBQUosQ0FBaUIsQ0FBakIsQ0FBakIsQ0FOVSxDQU00QjtBQUN0QztBQUNBLGFBQUtDLE9BQUwsR0FBZSxJQUFJRCxZQUFKLENBQWlCLENBQWpCLENBQWYsQ0FSVSxDQVEwQjtBQUNwQyxhQUFLRSxFQUFMLEdBQVUsSUFBSUYsWUFBSixDQUFpQixDQUFqQixDQUFWLENBVFUsQ0FTcUI7QUFDL0IsYUFBS0csS0FBTCxHQUFhLElBQUlILFlBQUosQ0FBaUIsQ0FBakIsQ0FBYixDQVZVLENBVXdCO0FBQ3JDO0FBQ0Q7QUFDQTs7Ozs7dUNBQ2U7QUFDWCxpQkFBS0YsT0FBTCxDQUFhTSxLQUFiLEdBQXFCO0FBQXJCLGFBQ0tDLFVBREwsQ0FDZ0IsS0FBS1YsUUFEckIsRUFFS1csT0FGTCxDQUVhLEtBQUtULFFBQUwsQ0FBY1UsQ0FBZCxHQUFrQmIsVUFBVWMsT0FGekMsRUFHS0MsT0FITCxDQUdhLEtBQUtaLFFBQUwsQ0FBY2EsQ0FBZCxHQUFrQmhCLFVBQVVjLE9BSHpDLEVBSUtHLE9BSkwsQ0FJYSxLQUFLZCxRQUFMLENBQWNlLENBQWQsR0FBa0JsQixVQUFVYyxPQUp6QyxFQUtLSyxNQUxMLENBS1ksS0FBS2pCLEtBTGpCO0FBTUE7QUFDQUgsb0JBQVFxQixVQUFSLENBQW1CLEtBQUtmLFNBQXhCLEVBQW1DLEtBQUtELE9BQUwsQ0FBYWlCLEdBQWhEO0FBQ0E7QUFDQXRCLG9CQUFRdUIsYUFBUixDQUFzQixLQUFLZixPQUEzQixFQUFvQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBcEMsRUFBa0QsS0FBS0gsT0FBTCxDQUFhaUIsR0FBL0QsRUFWVyxDQVUwRDtBQUNyRXRCLG9CQUFRdUIsYUFBUixDQUFzQixLQUFLZCxFQUEzQixFQUErQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBL0IsRUFBNkMsS0FBS0osT0FBTCxDQUFhaUIsR0FBMUQsRUFYVyxDQVdxRDtBQUNoRXRCLG9CQUFRdUIsYUFBUixDQUFzQixLQUFLYixLQUEzQixFQUFrQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBbEMsRUFBZ0QsS0FBS0wsT0FBTCxDQUFhaUIsR0FBN0QsRUFaVyxDQVl3RDtBQUNuRSxtQkFBTyxLQUFLakIsT0FBTCxDQUFhaUIsR0FBcEI7QUFDSDs7OzBDQUNpQjtBQUNkdEIsb0JBQVF1QixhQUFSLENBQXNCLEtBQUtmLE9BQTNCLEVBQW9DLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFwQyxFQUFrRCxLQUFLSCxPQUFMLENBQWFpQixHQUEvRDtBQUNBdEIsb0JBQVF1QixhQUFSLENBQXNCLEtBQUtkLEVBQTNCLEVBQStCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUEvQixFQUE2QyxLQUFLSixPQUFMLENBQWFpQixHQUExRDtBQUNBdEIsb0JBQVF1QixhQUFSLENBQXNCLEtBQUtiLEtBQTNCLEVBQWtDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFsQyxFQUFnRCxLQUFLTCxPQUFMLENBQWFpQixHQUE3RDtBQUNBLG1CQUFPLElBQVA7QUFDSDs7O3dDQUNlO0FBQUUsbUJBQU8sS0FBS2pCLE9BQUwsQ0FBYWlCLEdBQXBCO0FBQTBCOzs7MENBQzFCO0FBQUUsbUJBQU8sS0FBS2hCLFNBQVo7QUFBd0I7OztnQ0FDcEM7QUFDSixpQkFBS0osUUFBTCxDQUFjc0IsR0FBZCxDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QjtBQUNBLGlCQUFLckIsS0FBTCxDQUFXcUIsR0FBWCxDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckI7QUFDQSxpQkFBS3BCLFFBQUwsQ0FBY29CLEdBQWQsQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEI7QUFDSDs7Ozs7O0FBRUx2QixVQUFVYyxPQUFWLEdBQW9CVSxLQUFLQyxFQUFMLEdBQVUsR0FBOUIsQyxDQUFtQztrQkFDcEI7QUFDWHpCO0FBRFcsQyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTUFUSCBmcm9tICcuL01hdGgnO1xyXG5jb25zdCB7IFZlY3RvcjMsIE1hdHJpeDQgfSA9IE1BVEg7XHJcbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy90cmFuc2Zvcm0gdmVjdG9yc1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAwKTsgLy9UcmFkaXRpb25hbCBYLFksWiAzZCBwb3NpdGlvblxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjdG9yMygxLCAxLCAxKTsgLy9Ib3cgbXVjaCB0byBzY2FsZSBhIG1lc2guIEhhdmluZyBhIDEgbWVhbnMgbm8gc2NhbGluZyBpcyBkb25lLlxyXG4gICAgICAgIHRoaXMucm90YXRpb24gPSBuZXcgVmVjdG9yMygwLCAwLCAwKTsgLy9Ib2xkIHJvdGF0aW9uIHZhbHVlcyBiYXNlZCBvbiBkZWdyZWVzLCBPYmplY3Qgd2lsbCB0cmFuc2xhdGUgaXQgdG8gcmFkaWFuc1xyXG4gICAgICAgIHRoaXMubWF0VmlldyA9IG5ldyBNYXRyaXg0KCk7IC8vQ2FjaGUgdGhlIHJlc3VsdHMgd2hlbiBjYWxsaW5nIHVwZGF0ZU1hdHJpeFxyXG4gICAgICAgIHRoaXMubWF0Tm9ybWFsID0gbmV3IEZsb2F0MzJBcnJheSg5KTsgLy9UaGlzIGlzIGEgTWF0MywgcmF3IGFycmF5IHRvIGhvbGQgdGhlIHZhbHVlcyBpcyBlbm91Z2ggZm9yIHdoYXQgaXRzIHVzZWQgZm9yXHJcbiAgICAgICAgLy9EaXJlY3Rpb24gVmVjdG9ycywgTmVlZCA0IGVsZW1lbnRzIGZvciBtYXRoIG9wZXJhdGlvbnMgd2l0aCBtYXRyaWNlc1xyXG4gICAgICAgIHRoaXMuZm9yd2FyZCA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7IC8vV2hlbiByb3RhdGluZywga2VlcCB0cmFjayBvZiB3aGF0IHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBpc1xyXG4gICAgICAgIHRoaXMudXAgPSBuZXcgRmxvYXQzMkFycmF5KDQpOyAvL3doYXQgdGhlIHVwIGRpcmVjdGlvbiBpcywgaW52ZXJ0IHRvIGdldCBib3R0b21cclxuICAgICAgICB0aGlzLnJpZ2h0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTsgLy93aGF0IHRoZSByaWdodCBkaXJlY3Rpb24gaXMsIGludmVydCB0byBnZXQgbGVmdFxyXG4gICAgfVxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy9NZXRob2RzXHJcbiAgICB1cGRhdGVNYXRyaXgoKSB7XHJcbiAgICAgICAgdGhpcy5tYXRWaWV3LnJlc2V0KCkgLy9PcmRlciBpcyB2ZXJ5IGltcG9ydGFudCEhXHJcbiAgICAgICAgICAgIC52dHJhbnNsYXRlKHRoaXMucG9zaXRpb24pXHJcbiAgICAgICAgICAgIC5yb3RhdGVYKHRoaXMucm90YXRpb24ueCAqIFRyYW5zZm9ybS5kZWcyUmFkKVxyXG4gICAgICAgICAgICAucm90YXRlWih0aGlzLnJvdGF0aW9uLnogKiBUcmFuc2Zvcm0uZGVnMlJhZClcclxuICAgICAgICAgICAgLnJvdGF0ZVkodGhpcy5yb3RhdGlvbi55ICogVHJhbnNmb3JtLmRlZzJSYWQpXHJcbiAgICAgICAgICAgIC52c2NhbGUodGhpcy5zY2FsZSk7XHJcbiAgICAgICAgLy9DYWxjdWF0ZSB0aGUgTm9ybWFsIE1hdHJpeCB3aGljaCBkb2Vzbid0IG5lZWQgdHJhbnNsYXRlLCB0aGVuIHRyYW5zcG9zZSBhbmQgaW52ZXJzZXMgdGhlIG1hdDQgdG8gbWF0M1xyXG4gICAgICAgIE1hdHJpeDQubm9ybWFsTWF0Myh0aGlzLm1hdE5vcm1hbCwgdGhpcy5tYXRWaWV3LnJhdyk7XHJcbiAgICAgICAgLy9EZXRlcm1pbmUgRGlyZWN0aW9uIGFmdGVyIGFsbCB0aGUgdHJhbnNmb3JtYXRpb25zLlxyXG4gICAgICAgIE1hdHJpeDQudHJhbnNmb3JtVmVjNCh0aGlzLmZvcndhcmQsIFswLCAwLCAxLCAwXSwgdGhpcy5tYXRWaWV3LnJhdyk7IC8vWlxyXG4gICAgICAgIE1hdHJpeDQudHJhbnNmb3JtVmVjNCh0aGlzLnVwLCBbMCwgMSwgMCwgMF0sIHRoaXMubWF0Vmlldy5yYXcpOyAvL1lcclxuICAgICAgICBNYXRyaXg0LnRyYW5zZm9ybVZlYzQodGhpcy5yaWdodCwgWzEsIDAsIDAsIDBdLCB0aGlzLm1hdFZpZXcucmF3KTsgLy9YXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Vmlldy5yYXc7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVEaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgTWF0cml4NC50cmFuc2Zvcm1WZWM0KHRoaXMuZm9yd2FyZCwgWzAsIDAsIDEsIDBdLCB0aGlzLm1hdFZpZXcucmF3KTtcclxuICAgICAgICBNYXRyaXg0LnRyYW5zZm9ybVZlYzQodGhpcy51cCwgWzAsIDEsIDAsIDBdLCB0aGlzLm1hdFZpZXcucmF3KTtcclxuICAgICAgICBNYXRyaXg0LnRyYW5zZm9ybVZlYzQodGhpcy5yaWdodCwgWzEsIDAsIDAsIDBdLCB0aGlzLm1hdFZpZXcucmF3KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldFZpZXdNYXRyaXgoKSB7IHJldHVybiB0aGlzLm1hdFZpZXcucmF3OyB9XHJcbiAgICBnZXROb3JtYWxNYXRyaXgoKSB7IHJldHVybiB0aGlzLm1hdE5vcm1hbDsgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5zY2FsZS5zZXQoMSwgMSwgMSk7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICB9XHJcbn1cclxuVHJhbnNmb3JtLmRlZzJSYWQgPSBNYXRoLlBJIC8gMTgwOyAvL0NhY2hlIHJlc3VsdCwgb25lIGxlc3Mgb3BlcmF0aW9uIHRvIGRvIGZvciBlYWNoIHVwZGF0ZS5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgVHJhbnNmb3JtLFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGliL1RyYW5zZm9ybS50cyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.ShaderUtil = exports.Shader = exports.ShaderBuilder = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _gl = __webpack_require__(0);\\n\\nvar GL = _interopRequireWildcard(_gl);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar ATTR_POSITION_NAME = GL.ATTR_POSITION_NAME,\\n    ATTR_POSITION_LOC = GL.ATTR_POSITION_LOC,\\n    ATTR_NORMAL_NAME = GL.ATTR_NORMAL_NAME,\\n    ATTR_NORMAL_LOC = GL.ATTR_NORMAL_LOC,\\n    ATTR_UV_NAME = GL.ATTR_UV_NAME,\\n    ATTR_UV_LOC = GL.ATTR_UV_LOC;\\n\\nvar ShaderBuilder = exports.ShaderBuilder = function () {\\n    function ShaderBuilder(gl, vertShader, fragShader) {\\n        _classCallCheck(this, ShaderBuilder);\\n\\n        //If the text is small, then its most likely DOM names (very hack) else its actual Source.\\n        //TODO, Maybe check for new line instead of length, Dom names will never have new lines but source will.\\n        if (vertShader.length < 20) this.program = ShaderUtil.domShaderProgram(gl, vertShader, fragShader, true);else this.program = ShaderUtil.createProgramFromText(gl, vertShader, fragShader, true);\\n        if (this.program != null) {\\n            this.gl = gl;\\n            gl.useProgram(this.program);\\n            this.mUniformList = []; //List of Uniforms that have been loaded in. Key=UNIFORM_NAME {loc,type}\\n            this.mTextureList = []; //List of texture uniforms, Indexed {loc,tex}\\n            this.noCulling = false; //If true disables culling\\n            this.doBlending = false; //If true, allows alpha to work.\\n        }\\n    }\\n    //---------------------------------------------------\\n    // Methods For Shader Prep.\\n    //---------------------------------------------------\\n    //Takes in unlimited arguments. Its grouped by two so for example (UniformName,UniformType): \\\"uColors\\\",\\\"3fv\\\"\\n\\n\\n    _createClass(ShaderBuilder, [{\\n        key: 'prepareUniforms',\\n        value: function prepareUniforms() {\\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\\n                args[_key] = arguments[_key];\\n            }\\n\\n            if (args.length % 2 != 0) {\\n                console.log('prepareUniforms needs arguments to be in pairs.');\\n                return this;\\n            }\\n            var loc = 0;\\n            for (var i = 0; i < args.length; i += 2) {\\n                loc = this.gl.getUniformLocation(this.program, args[i]);\\n                if (loc != null) this.mUniformList[args[i]] = { loc: loc, type: args[i + 1] };\\n            }\\n            return this;\\n        }\\n        //Takes in unlimited arguments. Its grouped by two so for example (UniformName,CacheTextureName): \\\"uMask01\\\",\\\"tex001\\\";\\n\\n    }, {\\n        key: 'prepareTextures',\\n        value: function prepareTextures() {\\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\\n                args[_key2] = arguments[_key2];\\n            }\\n\\n            if (args.length % 2 != 0) {\\n                console.log('prepareTextures needs arguments to be in pairs.');\\n                return this;\\n            }\\n            var loc = 0,\\n                tex = '';\\n            for (var i = 0; i < args.length; i += 2) {\\n                tex = this.gl.mTextureCache[args[i + 1]];\\n                if (tex === undefined) {\\n                    console.log('Texture not found in cache ' + args[i + 1]);\\n                    continue;\\n                }\\n                loc = this.gl.getUniformLocation(this.program, args[i]);\\n                if (loc != null) this.mTextureList.push({ loc: loc, tex: tex });\\n            }\\n            return this;\\n        }\\n        //---------------------------------------------------\\n        // Setters Getters\\n        //---------------------------------------------------\\n        //Uses a 2 item group argument array. Uniform_Name, Uniform_Value;\\n\\n    }, {\\n        key: 'setUniforms',\\n        value: function setUniforms() {\\n            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\\n                args[_key3] = arguments[_key3];\\n            }\\n\\n            if (arguments.length % 2 != 0) {\\n                console.log('setUniforms needs arguments to be in pairs.');\\n                return this;\\n            }\\n            var name = void 0;\\n            for (var i = 0; i < arguments.length; i += 2) {\\n                name = arguments[i];\\n                if (this.mUniformList[name] === undefined) {\\n                    console.log('uniform not found ' + name);\\n                    return this;\\n                }\\n                switch (this.mUniformList[name].type) {\\n                    case '2fv':\\n                        this.gl.uniform2fv(this.mUniformList[name].loc, new Float32Array(arguments[i + 1]));\\n                        break;\\n                    case '3fv':\\n                        this.gl.uniform3fv(this.mUniformList[name].loc, new Float32Array(arguments[i + 1]));\\n                        break;\\n                    case '4fv':\\n                        this.gl.uniform4fv(this.mUniformList[name].loc, new Float32Array(arguments[i + 1]));\\n                        break;\\n                    case 'mat4':\\n                        this.gl.uniformMatrix4fv(this.mUniformList[name].loc, false, arguments[i + 1]);\\n                        break;\\n                    default:\\n                        console.log('unknown uniform type for ' + name);\\n                        break;\\n                }\\n            }\\n            return this;\\n        }\\n        //---------------------------------------------------\\n        // Methods\\n        //---------------------------------------------------\\n\\n    }, {\\n        key: 'activate',\\n        value: function activate() {\\n            this.gl.useProgram(this.program);return this;\\n        }\\n    }, {\\n        key: 'deactivate',\\n        value: function deactivate() {\\n            this.gl.useProgram(null);return this;\\n        }\\n        //function helps clean up resources when shader is no longer needed.\\n\\n    }, {\\n        key: 'dispose',\\n        value: function dispose() {\\n            //unbind the program if its currently active\\n            if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) this.gl.useProgram(null);\\n            this.gl.deleteProgram(this.program);\\n        }\\n    }, {\\n        key: 'preRender',\\n        value: function preRender() {\\n            this.gl.useProgram(this.program); //Save a function call and just activate this shader program on preRender\\n            //If passing in arguments, then lets push that to setUniforms for handling. Make less line needed in the main program by having preRender handle Uniforms\\n\\n            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\\n                args[_key4] = arguments[_key4];\\n            }\\n\\n            if (args.length > 0) this.setUniforms.apply(this, args);\\n            //..........................................\\n            //Prepare textures that might be loaded up.\\n            //TODO, After done rendering need to deactivate the texture slots\\n            if (this.mTextureList.length > 0) {\\n                var texSlot = void 0;\\n                for (var i = 0; i < this.mTextureList.length; i++) {\\n                    texSlot = this.gl['TEXTURE' + i];\\n                    this.gl.activeTexture(texSlot);\\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, this.mTextureList[i].tex);\\n                    this.gl.uniform1i(this.mTextureList[i].loc, i);\\n                }\\n            }\\n            return this;\\n        }\\n        //Handle rendering a modal\\n\\n    }, {\\n        key: 'renderModel',\\n        value: function renderModel(model, doShaderClose) {\\n            this.setUniforms('uMVMatrix', model.transform.getViewMatrix());\\n            this.gl.bindVertexArray(model.mesh.vao);\\n            if (model.mesh.noCulling || this.noCulling) this.gl.disable(this.gl.CULL_FACE);\\n            if (model.mesh.doBlending || this.doBlending) this.gl.enable(this.gl.BLEND);\\n            if (model.mesh.indexCount) this.gl.drawElements(model.mesh.drawMode, model.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);else this.gl.drawArrays(model.mesh.drawMode, 0, model.mesh.vertexCount);\\n            //Cleanup\\n            this.gl.bindVertexArray(null);\\n            if (model.mesh.noCulling || this.noCulling) this.gl.enable(this.gl.CULL_FACE);\\n            if (model.mesh.doBlending || this.doBlending) this.gl.disable(this.gl.BLEND);\\n            if (doShaderClose) this.gl.useProgram(null);\\n            return this;\\n        }\\n    }]);\\n\\n    return ShaderBuilder;\\n}();\\n\\nvar Shader = exports.Shader = function () {\\n    function Shader(gl, vertShaderSrc, fragShaderSrc) {\\n        _classCallCheck(this, Shader);\\n\\n        this.program = ShaderUtil.createProgramFromText(gl, vertShaderSrc, fragShaderSrc, true);\\n        if (this.program != null) {\\n            this.gl = gl;\\n            gl.useProgram(this.program);\\n            this.attribLoc = ShaderUtil.getStandardAttribLocations(gl, this.program);\\n            this.uniformLoc = ShaderUtil.getStandardUniformLocations(gl, this.program);\\n        }\\n        //Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\\n    }\\n    //...................................................\\n    //Methods\\n\\n\\n    _createClass(Shader, [{\\n        key: 'activate',\\n        value: function activate() {\\n            this.gl.useProgram(this.program);return this;\\n        }\\n    }, {\\n        key: 'deactivate',\\n        value: function deactivate() {\\n            this.gl.useProgram(null);return this;\\n        }\\n    }, {\\n        key: 'setPerspective',\\n        value: function setPerspective(matData) {\\n            this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData);return this;\\n        }\\n    }, {\\n        key: 'setModalMatrix',\\n        value: function setModalMatrix(matData) {\\n            this.gl.uniformMatrix4fv(this.uniformLoc.modalMatrix, false, matData);return this;\\n        }\\n    }, {\\n        key: 'setCameraMatrix',\\n        value: function setCameraMatrix(matData) {\\n            this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData);return this;\\n        }\\n        //function helps clean up resources when shader is no longer needed.\\n\\n    }, {\\n        key: 'dispose',\\n        value: function dispose() {\\n            //unbind the program if its currently active\\n            if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) this.gl.useProgram(null);\\n            this.gl.deleteProgram(this.program);\\n        }\\n        //...................................................\\n        //RENDER RELATED METHODS\\n        //Setup custom properties\\n\\n    }, {\\n        key: 'preRender',\\n        value: function preRender() {} //abstract method, extended object may need need to do some things before rendering.\\n        //Handle rendering a modal\\n\\n    }, {\\n        key: 'renderModal',\\n        value: function renderModal(modal) {\\n            this.setModalMatrix(modal.transform.getViewMatrix()); //Set the transform, so the shader knows where the modal exists in 3d space\\n            this.gl.bindVertexArray(modal.mesh.vao); //Enable VAO, this will set all the predefined attributes for the shader\\n            if (modal.mesh.noCulling) this.gl.disable(this.gl.CULL_FACE);\\n            if (modal.mesh.doBlending) this.gl.enable(this.gl.BLEND);\\n            if (modal.mesh.indexCount) this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, gl.UNSIGNED_SHORT, 0);else this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\\n            //Cleanup\\n            this.gl.bindVertexArray(null);\\n            if (modal.mesh.noCulling) this.gl.enable(this.gl.CULL_FACE);\\n            if (modal.mesh.doBlending) this.gl.disable(this.gl.BLEND);\\n            return this;\\n        }\\n    }]);\\n\\n    return Shader;\\n}();\\n\\nvar ShaderUtil = exports.ShaderUtil = function () {\\n    function ShaderUtil() {\\n        _classCallCheck(this, ShaderUtil);\\n    }\\n\\n    _createClass(ShaderUtil, null, [{\\n        key: 'domShaderSrc',\\n\\n        //-------------------------------------------------\\n        // Main utility functions\\n        //-------------------------------------------------\\n        //get the text of a script tag that are storing shader code.\\n        value: function domShaderSrc(elmID) {\\n            var elm = document.getElementById(elmID);\\n            if (!elm || elm.text == '') {\\n                console.log(elmID + ' shader not found or no text.');\\n                return null;\\n            }\\n            return elm.text;\\n        }\\n        //Create a shader by passing in its code and what type\\n\\n    }, {\\n        key: 'createShader',\\n        value: function createShader(gl, src, type) {\\n            var shader = gl.createShader(type);\\n            gl.shaderSource(shader, src);\\n            gl.compileShader(shader);\\n            //Get Error data if shader failed compiling\\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\\n                console.error('Error compiling shader : ' + src, gl.getShaderInfoLog(shader));\\n                gl.deleteShader(shader);\\n                return null;\\n            }\\n            return shader;\\n        }\\n        //Link two compiled shaders to create a program for rendering.\\n\\n    }, {\\n        key: 'createProgram',\\n        value: function createProgram(gl, vShader, fShader, doValidate) {\\n            //Link shaders together\\n            var prog = gl.createProgram();\\n            gl.attachShader(prog, vShader);\\n            gl.attachShader(prog, fShader);\\n            //Force predefined locations for specific attributes. If the attibute isn't used in the shader its location will default to -1\\n            gl.bindAttribLocation(prog, ATTR_POSITION_LOC, ATTR_POSITION_NAME);\\n            gl.bindAttribLocation(prog, ATTR_NORMAL_LOC, ATTR_NORMAL_NAME);\\n            gl.bindAttribLocation(prog, ATTR_UV_LOC, ATTR_UV_NAME);\\n            gl.linkProgram(prog);\\n            //Check if successful\\n            if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\\n                console.error('Error creating shader program.', gl.getProgramInfoLog(prog));\\n                gl.deleteProgram(prog);\\n                return null;\\n            }\\n            //Only do this for additional debugging.\\n            if (doValidate) {\\n                gl.validateProgram(prog);\\n                if (!gl.getProgramParameter(prog, gl.VALIDATE_STATUS)) {\\n                    console.error('Error validating program', gl.getProgramInfoLog(prog));\\n                    gl.deleteProgram(prog);\\n                    return null;\\n                }\\n            }\\n            //Can delete the shaders since the program has been made.\\n            gl.detachShader(prog, vShader); //TODO, detaching might cause issues on some browsers, Might only need to delete.\\n            gl.detachShader(prog, fShader);\\n            gl.deleteShader(fShader);\\n            gl.deleteShader(vShader);\\n            return prog;\\n        }\\n        //-------------------------------------------------\\n        // Helper functions\\n        //-------------------------------------------------\\n        //Pass in Script Tag IDs for our two shaders and create a program from it.\\n\\n    }, {\\n        key: 'domShaderProgram',\\n        value: function domShaderProgram(gl, vectID, fragID, doValidate) {\\n            var vShaderTxt = ShaderUtil.domShaderSrc(vectID);\\n            if (!vShaderTxt) return null;\\n            var fShaderTxt = ShaderUtil.domShaderSrc(fragID);\\n            if (!fShaderTxt) return null;\\n            var vShader = ShaderUtil.createShader(gl, vShaderTxt, gl.VERTEX_SHADER);\\n            if (!vShader) return null;\\n            var fShader = ShaderUtil.createShader(gl, fShaderTxt, gl.FRAGMENT_SHADER);\\n            if (!fShader) {\\n                gl.deleteShader(vShader);\\n                return null;\\n            }\\n            return ShaderUtil.createProgram(gl, vShader, fShader, true);\\n        }\\n    }, {\\n        key: 'createProgramFromText',\\n        value: function createProgramFromText(gl, vShaderTxt, fShaderTxt, doValidate) {\\n            var vShader = ShaderUtil.createShader(gl, vShaderTxt, gl.VERTEX_SHADER);\\n            if (!vShader) return null;\\n            var fShader = ShaderUtil.createShader(gl, fShaderTxt, gl.FRAGMENT_SHADER);\\n            if (!fShader) {\\n                gl.deleteShader(vShader);\\n                return null;\\n            }\\n            return ShaderUtil.createProgram(gl, vShader, fShader, true);\\n        }\\n        //-------------------------------------------------\\n        // Setters / Getters\\n        //-------------------------------------------------\\n        //Get the locations of standard Attributes that we will mostly be using. Location will = -1 if attribute is not found.\\n\\n    }, {\\n        key: 'getStandardAttribLocations',\\n        value: function getStandardAttribLocations(gl, program) {\\n            return {\\n                position: gl.getAttribLocation(program, ATTR_POSITION_NAME),\\n                norm: gl.getAttribLocation(program, ATTR_NORMAL_NAME),\\n                uv: gl.getAttribLocation(program, ATTR_UV_NAME)\\n            };\\n        }\\n    }, {\\n        key: 'getStandardUniformLocations',\\n        value: function getStandardUniformLocations(gl, program) {\\n            return {\\n                perspective: gl.getUniformLocation(program, 'uPMatrix'),\\n                modalMatrix: gl.getUniformLocation(program, 'uMVMatrix'),\\n                cameraMatrix: gl.getUniformLocation(program, 'uCameraMatrix'),\\n                mainTexture: gl.getUniformLocation(program, 'uMainTex')\\n            };\\n        }\\n    }]);\\n\\n    return ShaderUtil;\\n}();\\n\\nexports.default = {\\n    ShaderBuilder: ShaderBuilder,\\n    Shader: Shader,\\n    ShaderUtil: ShaderUtil\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n//###########################################################################################\\n//###########################################################################################\\nvar MathUtil = exports.MathUtil = function () {\\n    function MathUtil() {\\n        _classCallCheck(this, MathUtil);\\n    }\\n\\n    _createClass(MathUtil, null, [{\\n        key: \\\"Map\\\",\\n\\n        //Normalize x value to x range, then normalize to lerp the z range.\\n        value: function Map(x, xMin, xMax, zMin, zMax) {\\n            return (x - xMin) / (xMax - xMin) * (zMax - zMin) + zMin;\\n        }\\n    }]);\\n\\n    return MathUtil;\\n}();\\n//###########################################################################################\\n\\n\\nvar Vector3 = exports.Vector3 = function () {\\n    function Vector3(x, y, z) {\\n        _classCallCheck(this, Vector3);\\n\\n        this.x = x || 0.0;this.y = y || 0.0;this.z = z || 0.0;\\n    }\\n\\n    _createClass(Vector3, [{\\n        key: \\\"magnitude\\\",\\n        value: function magnitude(v) {\\n            //Only get the magnitude of this vector\\n            if (v === undefined) return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\\n            //Get magnitude based on another vector\\n            var x = v.x - this.x,\\n                y = v.y - this.y,\\n                z = v.y - this.z;\\n            return Math.sqrt(x * x + y * y + z * z);\\n        }\\n    }, {\\n        key: \\\"normalize\\\",\\n        value: function normalize() {\\n            var mag = this.magnitude();this.x /= mag;this.y /= mag;this.z /= mag;return this;\\n        }\\n    }, {\\n        key: \\\"set\\\",\\n        value: function set(x, y, z) {\\n            this.x = x;this.y = y;this.z = z;return this;\\n        }\\n    }, {\\n        key: \\\"multiScalar\\\",\\n        value: function multiScalar(v) {\\n            this.x *= v;this.y *= v;this.z *= v;return this;\\n        }\\n    }, {\\n        key: \\\"getArray\\\",\\n        value: function getArray() {\\n            return [this.x, this.y, this.z];\\n        }\\n    }, {\\n        key: \\\"getFloatArray\\\",\\n        value: function getFloatArray() {\\n            return new Float32Array([this.x, this.y, this.z]);\\n        }\\n    }, {\\n        key: \\\"clone\\\",\\n        value: function clone() {\\n            return new Vector3(this.x, this.y, this.z);\\n        }\\n    }]);\\n\\n    return Vector3;\\n}();\\n//###########################################################################################\\n\\n\\nvar Matrix4 = exports.Matrix4 = function () {\\n    function Matrix4() {\\n        _classCallCheck(this, Matrix4);\\n\\n        this.raw = Matrix4.identity();\\n    }\\n    //....................................................................\\n    //Transformations Methods\\n\\n\\n    _createClass(Matrix4, [{\\n        key: \\\"vtranslate\\\",\\n        value: function vtranslate(v) {\\n            Matrix4.translate(this.raw, v.x, v.y, v.z);return this;\\n        }\\n    }, {\\n        key: \\\"translate\\\",\\n        value: function translate(x, y, z) {\\n            Matrix4.translate(this.raw, x, y, z);return this;\\n        }\\n    }, {\\n        key: \\\"rotateY\\\",\\n        value: function rotateY(rad) {\\n            Matrix4.rotateY(this.raw, rad);return this;\\n        }\\n    }, {\\n        key: \\\"rotateX\\\",\\n        value: function rotateX(rad) {\\n            Matrix4.rotateX(this.raw, rad);return this;\\n        }\\n    }, {\\n        key: \\\"rotateZ\\\",\\n        value: function rotateZ(rad) {\\n            Matrix4.rotateZ(this.raw, rad);return this;\\n        }\\n    }, {\\n        key: \\\"vscale\\\",\\n        value: function vscale(vec3) {\\n            Matrix4.scale(this.raw, vec3.x, vec3.y, vec3.z);return this;\\n        }\\n    }, {\\n        key: \\\"scale\\\",\\n        value: function scale(x, y, z) {\\n            Matrix4.scale(this.raw, x, y, z);return this;\\n        }\\n    }, {\\n        key: \\\"invert\\\",\\n        value: function invert() {\\n            Matrix4.invert(this.raw);return this;\\n        }\\n        //....................................................................\\n        //Methods\\n        //Bring is back to identity without changing the transform values.\\n\\n    }, {\\n        key: \\\"resetRotation\\\",\\n        value: function resetRotation() {\\n            for (var i = 0; i < this.raw.length; i++) {\\n                if (i >= 12 && i <= 14) continue;\\n                this.raw[i] = i % 5 == 0 ? 1 : 0; //only positions 0,5,10,15 need to be 1 else 0.\\n            }\\n            return this;\\n        }\\n        //reset data back to identity.\\n\\n    }, {\\n        key: \\\"reset\\\",\\n        value: function reset() {\\n            for (var i = 0; i < this.raw.length; i++) {\\n                this.raw[i] = i % 5 == 0 ? 1 : 0;\\n            } //only positions 0,5,10,15 need to be 1 else 0.\\n            return this;\\n        }\\n        //....................................................................\\n        //Static Data Methods\\n\\n    }], [{\\n        key: \\\"identity\\\",\\n        value: function identity() {\\n            var a = new Float32Array(16);\\n            a[0] = a[5] = a[10] = a[15] = 1;\\n            return a;\\n        }\\n        //from glMatrix\\n\\n    }, {\\n        key: \\\"perspective\\\",\\n        value: function perspective(out, fovy, aspect, near, far) {\\n            var f = 1.0 / Math.tan(fovy / 2),\\n                nf = 1 / (near - far);\\n            out[0] = f / aspect;\\n            out[1] = 0;\\n            out[2] = 0;\\n            out[3] = 0;\\n            out[4] = 0;\\n            out[5] = f;\\n            out[6] = 0;\\n            out[7] = 0;\\n            out[8] = 0;\\n            out[9] = 0;\\n            out[10] = (far + near) * nf;\\n            out[11] = -1;\\n            out[12] = 0;\\n            out[13] = 0;\\n            out[14] = 2 * far * near * nf;\\n            out[15] = 0;\\n        }\\n    }, {\\n        key: \\\"ortho\\\",\\n        value: function ortho(out, left, right, bottom, top, near, far) {\\n            var lr = 1 / (left - right),\\n                bt = 1 / (bottom - top),\\n                nf = 1 / (near - far);\\n            out[0] = -2 * lr;\\n            out[1] = 0;\\n            out[2] = 0;\\n            out[3] = 0;\\n            out[4] = 0;\\n            out[5] = -2 * bt;\\n            out[6] = 0;\\n            out[7] = 0;\\n            out[8] = 0;\\n            out[9] = 0;\\n            out[10] = 2 * nf;\\n            out[11] = 0;\\n            out[12] = (left + right) * lr;\\n            out[13] = (top + bottom) * bt;\\n            out[14] = (far + near) * nf;\\n            out[15] = 1;\\n        }\\n    }, {\\n        key: \\\"transpose\\\",\\n\\n        //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\\n        //make the rows into the columns\\n        value: function transpose(out, a) {\\n            //If we are transposing ourselves we can skip a few steps but have to cache some values\\n            if (out === a) {\\n                var a01 = a[1],\\n                    a02 = a[2],\\n                    a03 = a[3],\\n                    a12 = a[6],\\n                    a13 = a[7],\\n                    a23 = a[11];\\n                out[1] = a[4];\\n                out[2] = a[8];\\n                out[3] = a[12];\\n                out[4] = a01;\\n                out[6] = a[9];\\n                out[7] = a[13];\\n                out[8] = a02;\\n                out[9] = a12;\\n                out[11] = a[14];\\n                out[12] = a03;\\n                out[13] = a13;\\n                out[14] = a23;\\n            } else {\\n                out[0] = a[0];\\n                out[1] = a[4];\\n                out[2] = a[8];\\n                out[3] = a[12];\\n                out[4] = a[1];\\n                out[5] = a[5];\\n                out[6] = a[9];\\n                out[7] = a[13];\\n                out[8] = a[2];\\n                out[9] = a[6];\\n                out[10] = a[10];\\n                out[11] = a[14];\\n                out[12] = a[3];\\n                out[13] = a[7];\\n                out[14] = a[11];\\n                out[15] = a[15];\\n            }\\n            return out;\\n        }\\n        //Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\\n\\n    }, {\\n        key: \\\"normalMat3\\\",\\n        value: function normalMat3(out, a) {\\n            var a00 = a[0],\\n                a01 = a[1],\\n                a02 = a[2],\\n                a03 = a[3],\\n                a10 = a[4],\\n                a11 = a[5],\\n                a12 = a[6],\\n                a13 = a[7],\\n                a20 = a[8],\\n                a21 = a[9],\\n                a22 = a[10],\\n                a23 = a[11],\\n                a30 = a[12],\\n                a31 = a[13],\\n                a32 = a[14],\\n                a33 = a[15],\\n                b00 = a00 * a11 - a01 * a10,\\n                b01 = a00 * a12 - a02 * a10,\\n                b02 = a00 * a13 - a03 * a10,\\n                b03 = a01 * a12 - a02 * a11,\\n                b04 = a01 * a13 - a03 * a11,\\n                b05 = a02 * a13 - a03 * a12,\\n                b06 = a20 * a31 - a21 * a30,\\n                b07 = a20 * a32 - a22 * a30,\\n                b08 = a20 * a33 - a23 * a30,\\n                b09 = a21 * a32 - a22 * a31,\\n                b10 = a21 * a33 - a23 * a31,\\n                b11 = a22 * a33 - a23 * a32,\\n\\n            // Calculate the determinant\\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n            if (!det) return null;\\n            det = 1.0 / det;\\n            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\\n            out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\\n            out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\\n            out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\\n            out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\\n            out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\\n            out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\\n            out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\\n            out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\\n            return out;\\n        }\\n        //....................................................................\\n        //Static Operation\\n        //https://github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\\n\\n    }, {\\n        key: \\\"multiplyVector\\\",\\n        value: function multiplyVector(mat4, v) {\\n            var x = v[0],\\n                y = v[1],\\n                z = v[2],\\n                w = v[3];\\n            var c1r1 = mat4[0],\\n                c2r1 = mat4[1],\\n                c3r1 = mat4[2],\\n                c4r1 = mat4[3],\\n                c1r2 = mat4[4],\\n                c2r2 = mat4[5],\\n                c3r2 = mat4[6],\\n                c4r2 = mat4[7],\\n                c1r3 = mat4[8],\\n                c2r3 = mat4[9],\\n                c3r3 = mat4[10],\\n                c4r3 = mat4[11],\\n                c1r4 = mat4[12],\\n                c2r4 = mat4[13],\\n                c3r4 = mat4[14],\\n                c4r4 = mat4[15];\\n            return [x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4, x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4, x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4, x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4];\\n        }\\n        //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\\n\\n    }, {\\n        key: \\\"transformVec4\\\",\\n        value: function transformVec4(out, v, m) {\\n            out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\\n            out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\\n            out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\\n            out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\\n            return out;\\n        }\\n        //From glMatrix\\n        //Multiple two mat4 together\\n\\n    }, {\\n        key: \\\"mult\\\",\\n        value: function mult(out, a, b) {\\n            var a00 = a[0],\\n                a01 = a[1],\\n                a02 = a[2],\\n                a03 = a[3],\\n                a10 = a[4],\\n                a11 = a[5],\\n                a12 = a[6],\\n                a13 = a[7],\\n                a20 = a[8],\\n                a21 = a[9],\\n                a22 = a[10],\\n                a23 = a[11],\\n                a30 = a[12],\\n                a31 = a[13],\\n                a32 = a[14],\\n                a33 = a[15];\\n            // Cache only the current line of the second matrix\\n            var b0 = b[0],\\n                b1 = b[1],\\n                b2 = b[2],\\n                b3 = b[3];\\n            out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n            out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n            out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n            out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n            b0 = b[4];\\n            b1 = b[5];\\n            b2 = b[6];\\n            b3 = b[7];\\n            out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n            out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n            out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n            out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n            b0 = b[8];\\n            b1 = b[9];\\n            b2 = b[10];\\n            b3 = b[11];\\n            out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n            out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n            out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n            out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n            b0 = b[12];\\n            b1 = b[13];\\n            b2 = b[14];\\n            b3 = b[15];\\n            out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\\n            out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\\n            out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\\n            out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\\n            return out;\\n        }\\n        //....................................................................\\n        //Static Transformation\\n\\n    }, {\\n        key: \\\"scale\\\",\\n        value: function scale(out, x, y, z) {\\n            out[0] *= x;\\n            out[1] *= x;\\n            out[2] *= x;\\n            out[3] *= x;\\n            out[4] *= y;\\n            out[5] *= y;\\n            out[6] *= y;\\n            out[7] *= y;\\n            out[8] *= z;\\n            out[9] *= z;\\n            out[10] *= z;\\n            out[11] *= z;\\n            return out;\\n        }\\n    }, {\\n        key: \\\"rotateY\\\",\\n        value: function rotateY(out, rad) {\\n            var s = Math.sin(rad),\\n                c = Math.cos(rad),\\n                a00 = out[0],\\n                a01 = out[1],\\n                a02 = out[2],\\n                a03 = out[3],\\n                a20 = out[8],\\n                a21 = out[9],\\n                a22 = out[10],\\n                a23 = out[11];\\n            // Perform axis-specific matrix multiplication\\n            out[0] = a00 * c - a20 * s;\\n            out[1] = a01 * c - a21 * s;\\n            out[2] = a02 * c - a22 * s;\\n            out[3] = a03 * c - a23 * s;\\n            out[8] = a00 * s + a20 * c;\\n            out[9] = a01 * s + a21 * c;\\n            out[10] = a02 * s + a22 * c;\\n            out[11] = a03 * s + a23 * c;\\n            return out;\\n        }\\n    }, {\\n        key: \\\"rotateX\\\",\\n        value: function rotateX(out, rad) {\\n            var s = Math.sin(rad),\\n                c = Math.cos(rad),\\n                a10 = out[4],\\n                a11 = out[5],\\n                a12 = out[6],\\n                a13 = out[7],\\n                a20 = out[8],\\n                a21 = out[9],\\n                a22 = out[10],\\n                a23 = out[11];\\n            // Perform axis-specific matrix multiplication\\n            out[4] = a10 * c + a20 * s;\\n            out[5] = a11 * c + a21 * s;\\n            out[6] = a12 * c + a22 * s;\\n            out[7] = a13 * c + a23 * s;\\n            out[8] = a20 * c - a10 * s;\\n            out[9] = a21 * c - a11 * s;\\n            out[10] = a22 * c - a12 * s;\\n            out[11] = a23 * c - a13 * s;\\n            return out;\\n        }\\n    }, {\\n        key: \\\"rotateZ\\\",\\n        value: function rotateZ(out, rad) {\\n            var s = Math.sin(rad),\\n                c = Math.cos(rad),\\n                a00 = out[0],\\n                a01 = out[1],\\n                a02 = out[2],\\n                a03 = out[3],\\n                a10 = out[4],\\n                a11 = out[5],\\n                a12 = out[6],\\n                a13 = out[7];\\n            // Perform axis-specific matrix multiplication\\n            out[0] = a00 * c + a10 * s;\\n            out[1] = a01 * c + a11 * s;\\n            out[2] = a02 * c + a12 * s;\\n            out[3] = a03 * c + a13 * s;\\n            out[4] = a10 * c - a00 * s;\\n            out[5] = a11 * c - a01 * s;\\n            out[6] = a12 * c - a02 * s;\\n            out[7] = a13 * c - a03 * s;\\n            return out;\\n        }\\n    }, {\\n        key: \\\"rotate\\\",\\n        value: function rotate(out, rad, axis) {\\n            var x = axis[0],\\n                y = axis[1],\\n                z = axis[2],\\n                len = Math.sqrt(x * x + y * y + z * z),\\n                s = void 0,\\n                c = void 0,\\n                t = void 0,\\n                a00 = void 0,\\n                a01 = void 0,\\n                a02 = void 0,\\n                a03 = void 0,\\n                a10 = void 0,\\n                a11 = void 0,\\n                a12 = void 0,\\n                a13 = void 0,\\n                a20 = void 0,\\n                a21 = void 0,\\n                a22 = void 0,\\n                a23 = void 0,\\n                b00 = void 0,\\n                b01 = void 0,\\n                b02 = void 0,\\n                b10 = void 0,\\n                b11 = void 0,\\n                b12 = void 0,\\n                b20 = void 0,\\n                b21 = void 0,\\n                b22 = void 0;\\n            if (Math.abs(len) < 0.000001) {\\n                return null;\\n            }\\n            len = 1 / len;\\n            x *= len;\\n            y *= len;\\n            z *= len;\\n            s = Math.sin(rad);\\n            c = Math.cos(rad);\\n            t = 1 - c;\\n            a00 = out[0];\\n            a01 = out[1];\\n            a02 = out[2];\\n            a03 = out[3];\\n            a10 = out[4];\\n            a11 = out[5];\\n            a12 = out[6];\\n            a13 = out[7];\\n            a20 = out[8];\\n            a21 = out[9];\\n            a22 = out[10];\\n            a23 = out[11];\\n            // Construct the elements of the rotation matrix\\n            b00 = x * x * t + c;\\n            b01 = y * x * t + z * s;\\n            b02 = z * x * t - y * s;\\n            b10 = x * y * t - z * s;\\n            b11 = y * y * t + c;\\n            b12 = z * y * t + x * s;\\n            b20 = x * z * t + y * s;\\n            b21 = y * z * t - x * s;\\n            b22 = z * z * t + c;\\n            // Perform rotation-specific matrix multiplication\\n            out[0] = a00 * b00 + a10 * b01 + a20 * b02;\\n            out[1] = a01 * b00 + a11 * b01 + a21 * b02;\\n            out[2] = a02 * b00 + a12 * b01 + a22 * b02;\\n            out[3] = a03 * b00 + a13 * b01 + a23 * b02;\\n            out[4] = a00 * b10 + a10 * b11 + a20 * b12;\\n            out[5] = a01 * b10 + a11 * b11 + a21 * b12;\\n            out[6] = a02 * b10 + a12 * b11 + a22 * b12;\\n            out[7] = a03 * b10 + a13 * b11 + a23 * b12;\\n            out[8] = a00 * b20 + a10 * b21 + a20 * b22;\\n            out[9] = a01 * b20 + a11 * b21 + a21 * b22;\\n            out[10] = a02 * b20 + a12 * b21 + a22 * b22;\\n            out[11] = a03 * b20 + a13 * b21 + a23 * b22;\\n        }\\n    }, {\\n        key: \\\"invert\\\",\\n        value: function invert(out, mat) {\\n            if (mat === undefined) mat = out; //If input isn't sent, then output is also input\\n            var a00 = mat[0],\\n                a01 = mat[1],\\n                a02 = mat[2],\\n                a03 = mat[3],\\n                a10 = mat[4],\\n                a11 = mat[5],\\n                a12 = mat[6],\\n                a13 = mat[7],\\n                a20 = mat[8],\\n                a21 = mat[9],\\n                a22 = mat[10],\\n                a23 = mat[11],\\n                a30 = mat[12],\\n                a31 = mat[13],\\n                a32 = mat[14],\\n                a33 = mat[15],\\n                b00 = a00 * a11 - a01 * a10,\\n                b01 = a00 * a12 - a02 * a10,\\n                b02 = a00 * a13 - a03 * a10,\\n                b03 = a01 * a12 - a02 * a11,\\n                b04 = a01 * a13 - a03 * a11,\\n                b05 = a02 * a13 - a03 * a12,\\n                b06 = a20 * a31 - a21 * a30,\\n                b07 = a20 * a32 - a22 * a30,\\n                b08 = a20 * a33 - a23 * a30,\\n                b09 = a21 * a32 - a22 * a31,\\n                b10 = a21 * a33 - a23 * a31,\\n                b11 = a22 * a33 - a23 * a32,\\n\\n            // Calculate the determinant\\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\\n            if (!det) return false;\\n            det = 1.0 / det;\\n            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\\n            out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\\n            out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\\n            out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\\n            out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\\n            out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\\n            out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\\n            out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\\n            out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\\n            out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\\n            out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\\n            out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\\n            out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\\n            out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\\n            out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\\n            out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\\n            return true;\\n        }\\n        //https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\\n\\n    }, {\\n        key: \\\"translate\\\",\\n        value: function translate(out, x, y, z) {\\n            out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\\n            out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\\n            out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\\n            out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\\n        }\\n    }]);\\n\\n    return Matrix4;\\n}();\\n\\nexports.default = {\\n    MathUtil: MathUtil,\\n    Vector3: Vector3,\\n    Matrix4: Matrix4\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL01hdGgudHM/MTA2MiJdLCJuYW1lcyI6WyJNYXRoVXRpbCIsIngiLCJ4TWluIiwieE1heCIsInpNaW4iLCJ6TWF4IiwiVmVjdG9yMyIsInkiLCJ6IiwidiIsInVuZGVmaW5lZCIsIk1hdGgiLCJzcXJ0IiwibWFnIiwibWFnbml0dWRlIiwiRmxvYXQzMkFycmF5IiwiTWF0cml4NCIsInJhdyIsImlkZW50aXR5IiwidHJhbnNsYXRlIiwicmFkIiwicm90YXRlWSIsInJvdGF0ZVgiLCJyb3RhdGVaIiwidmVjMyIsInNjYWxlIiwiaW52ZXJ0IiwiaSIsImxlbmd0aCIsImEiLCJvdXQiLCJmb3Z5IiwiYXNwZWN0IiwibmVhciIsImZhciIsImYiLCJ0YW4iLCJuZiIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsImxyIiwiYnQiLCJhMDEiLCJhMDIiLCJhMDMiLCJhMTIiLCJhMTMiLCJhMjMiLCJhMDAiLCJhMTAiLCJhMTEiLCJhMjAiLCJhMjEiLCJhMjIiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMDAiLCJiMDEiLCJiMDIiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJiMTAiLCJiMTEiLCJkZXQiLCJtYXQ0IiwidyIsImMxcjEiLCJjMnIxIiwiYzNyMSIsImM0cjEiLCJjMXIyIiwiYzJyMiIsImMzcjIiLCJjNHIyIiwiYzFyMyIsImMycjMiLCJjM3IzIiwiYzRyMyIsImMxcjQiLCJjMnI0IiwiYzNyNCIsImM0cjQiLCJtIiwiYiIsImIwIiwiYjEiLCJiMiIsImIzIiwicyIsInNpbiIsImMiLCJjb3MiLCJheGlzIiwibGVuIiwidCIsImIxMiIsImIyMCIsImIyMSIsImIyMiIsImFicyIsIm1hdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7SUFDYUEsUSxXQUFBQSxROzs7Ozs7OztBQUNUOzRCQUNXQyxDLEVBQUdDLEksRUFBTUMsSSxFQUFNQyxJLEVBQU1DLEks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QXRCLEdBQTBCdUIsSUFBSSxDQUFKLElBQVN0QixDQUFuQyxHQUF1Q3NCLElBQUksRUFBSixDQUFqRDtBQUNBQSxnQkFBSSxFQUFKLElBQVVBLElBQUksQ0FBSixJQUFTN0IsQ0FBVCxHQUFhNkIsSUFBSSxDQUFKLElBQVN2QixDQUF0QixHQUEwQnVCLElBQUksRUFBSixJQUFVdEIsQ0FBcEMsR0FBd0NzQixJQUFJLEVBQUosQ0FBbEQ7QUFDQUEsZ0JBQUksRUFBSixJQUFVQSxJQUFJLENBQUosSUFBUzdCLENBQVQsR0FBYTZCLElBQUksQ0FBSixJQUFTdkIsQ0FBdEIsR0FBMEJ1QixJQUFJLEVBQUosSUFBVXRCLENBQXBDLEdBQXdDc0IsSUFBSSxFQUFKLENBQWxEO0FBQ0g7Ozs7OztrQkFFVTtBQUNYOUIsc0JBRFc7QUFFWE0sb0JBRlc7QUFHWFU7QUFIVyxDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbmV4cG9ydCBjbGFzcyBNYXRoVXRpbCB7XHJcbiAgICAvL05vcm1hbGl6ZSB4IHZhbHVlIHRvIHggcmFuZ2UsIHRoZW4gbm9ybWFsaXplIHRvIGxlcnAgdGhlIHogcmFuZ2UuXHJcbiAgICBzdGF0aWMgTWFwKHgsIHhNaW4sIHhNYXgsIHpNaW4sIHpNYXgpIHsgcmV0dXJuICh4IC0geE1pbikgLyAoeE1heCAtIHhNaW4pICogKHpNYXggLSB6TWluKSArIHpNaW47IH1cclxufVxyXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuZXhwb3J0IGNsYXNzIFZlY3RvcjMge1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikgeyB0aGlzLnggPSB4IHx8IDAuMDsgdGhpcy55ID0geSB8fCAwLjA7IHRoaXMueiA9IHogfHwgMC4wOyB9XHJcbiAgICBtYWduaXR1ZGUodikge1xyXG4gICAgICAgIC8vT25seSBnZXQgdGhlIG1hZ25pdHVkZSBvZiB0aGlzIHZlY3RvclxyXG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcclxuICAgICAgICAvL0dldCBtYWduaXR1ZGUgYmFzZWQgb24gYW5vdGhlciB2ZWN0b3JcclxuICAgICAgICBsZXQgeCA9IHYueCAtIHRoaXMueCwgeSA9IHYueSAtIHRoaXMueSwgeiA9IHYueSAtIHRoaXMuejtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemUoKSB7IGxldCBtYWcgPSB0aGlzLm1hZ25pdHVkZSgpOyB0aGlzLnggLz0gbWFnOyB0aGlzLnkgLz0gbWFnOyB0aGlzLnogLz0gbWFnOyByZXR1cm4gdGhpczsgfVxyXG4gICAgc2V0KHgsIHksIHopIHsgdGhpcy54ID0geDsgdGhpcy55ID0geTsgdGhpcy56ID0gejsgcmV0dXJuIHRoaXM7IH1cclxuICAgIG11bHRpU2NhbGFyKHYpIHsgdGhpcy54ICo9IHY7IHRoaXMueSAqPSB2OyB0aGlzLnogKj0gdjsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGdldEFycmF5KCkgeyByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnpdOyB9XHJcbiAgICBnZXRGbG9hdEFycmF5KCkgeyByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbdGhpcy54LCB0aGlzLnksIHRoaXMuel0pOyB9XHJcbiAgICBjbG9uZSgpIHsgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopOyB9XHJcbn1cclxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbmV4cG9ydCBjbGFzcyBNYXRyaXg0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB0aGlzLnJhdyA9IE1hdHJpeDQuaWRlbnRpdHkoKTsgfVxyXG4gICAgLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgLy9UcmFuc2Zvcm1hdGlvbnMgTWV0aG9kc1xyXG4gICAgdnRyYW5zbGF0ZSh2KSB7IE1hdHJpeDQudHJhbnNsYXRlKHRoaXMucmF3LCB2LngsIHYueSwgdi56KTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHRyYW5zbGF0ZSh4LCB5LCB6KSB7IE1hdHJpeDQudHJhbnNsYXRlKHRoaXMucmF3LCB4LCB5LCB6KTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHJvdGF0ZVkocmFkKSB7IE1hdHJpeDQucm90YXRlWSh0aGlzLnJhdywgcmFkKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHJvdGF0ZVgocmFkKSB7IE1hdHJpeDQucm90YXRlWCh0aGlzLnJhdywgcmFkKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHJvdGF0ZVoocmFkKSB7IE1hdHJpeDQucm90YXRlWih0aGlzLnJhdywgcmFkKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHZzY2FsZSh2ZWMzKSB7IE1hdHJpeDQuc2NhbGUodGhpcy5yYXcsIHZlYzMueCwgdmVjMy55LCB2ZWMzLnopOyByZXR1cm4gdGhpczsgfVxyXG4gICAgc2NhbGUoeCwgeSwgeikgeyBNYXRyaXg0LnNjYWxlKHRoaXMucmF3LCB4LCB5LCB6KTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGludmVydCgpIHsgTWF0cml4NC5pbnZlcnQodGhpcy5yYXcpOyByZXR1cm4gdGhpczsgfVxyXG4gICAgLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgLy9NZXRob2RzXHJcbiAgICAvL0JyaW5nIGlzIGJhY2sgdG8gaWRlbnRpdHkgd2l0aG91dCBjaGFuZ2luZyB0aGUgdHJhbnNmb3JtIHZhbHVlcy5cclxuICAgIHJlc2V0Um90YXRpb24oKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJhdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA+PSAxMiAmJiBpIDw9IDE0KVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIHRoaXMucmF3W2ldID0gKGkgJSA1ID09IDApID8gMSA6IDA7IC8vb25seSBwb3NpdGlvbnMgMCw1LDEwLDE1IG5lZWQgdG8gYmUgMSBlbHNlIDAuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLy9yZXNldCBkYXRhIGJhY2sgdG8gaWRlbnRpdHkuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmF3Lmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB0aGlzLnJhd1tpXSA9IChpICUgNSA9PSAwKSA/IDEgOiAwOyAvL29ubHkgcG9zaXRpb25zIDAsNSwxMCwxNSBuZWVkIHRvIGJlIDEgZWxzZSAwLlxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgLy9TdGF0aWMgRGF0YSBNZXRob2RzXHJcbiAgICBzdGF0aWMgaWRlbnRpdHkoKSB7XHJcbiAgICAgICAgbGV0IGEgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcclxuICAgICAgICBhWzBdID0gYVs1XSA9IGFbMTBdID0gYVsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBhO1xyXG4gICAgfVxyXG4gICAgLy9mcm9tIGdsTWF0cml4XHJcbiAgICBzdGF0aWMgcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xyXG4gICAgICAgIGxldCBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLCBuZiA9IDEgLyAobmVhciAtIGZhcik7XHJcbiAgICAgICAgb3V0WzBdID0gZiAvIGFzcGVjdDtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IGY7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDA7XHJcbiAgICAgICAgb3V0WzldID0gMDtcclxuICAgICAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICAgICAgb3V0WzExXSA9IC0xO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSAoMiAqIGZhciAqIG5lYXIpICogbmY7XHJcbiAgICAgICAgb3V0WzE1XSA9IDA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgb3J0aG8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xyXG4gICAgICAgIGxldCBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KSwgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCksIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcclxuICAgICAgICBvdXRbMF0gPSAtMiAqIGxyO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IDA7XHJcbiAgICAgICAgb3V0WzVdID0gLTIgKiBidDtcclxuICAgICAgICBvdXRbNl0gPSAwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICBvdXRbOV0gPSAwO1xyXG4gICAgICAgIG91dFsxMF0gPSAyICogbmY7XHJcbiAgICAgICAgb3V0WzExXSA9IDA7XHJcbiAgICAgICAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XHJcbiAgICAgICAgb3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XHJcbiAgICAgICAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgLy9odHRwczovL2dpdGh1Yi5jb20vdG9qaS9nbC1tYXRyaXgvYmxvYi9tYXN0ZXIvc3JjL2dsLW1hdHJpeC9tYXQ0LmpzXHJcbiAgICAvL21ha2UgdGhlIHJvd3MgaW50byB0aGUgY29sdW1uc1xyXG4gICAgc3RhdGljIHRyYW5zcG9zZShvdXQsIGEpIHtcclxuICAgICAgICAvL0lmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcclxuICAgICAgICBpZiAob3V0ID09PSBhKSB7XHJcbiAgICAgICAgICAgIGxldCBhMDEgPSBhWzFdLCBhMDIgPSBhWzJdLCBhMDMgPSBhWzNdLCBhMTIgPSBhWzZdLCBhMTMgPSBhWzddLCBhMjMgPSBhWzExXTtcclxuICAgICAgICAgICAgb3V0WzFdID0gYVs0XTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYVs4XTtcclxuICAgICAgICAgICAgb3V0WzNdID0gYVsxMl07XHJcbiAgICAgICAgICAgIG91dFs0XSA9IGEwMTtcclxuICAgICAgICAgICAgb3V0WzZdID0gYVs5XTtcclxuICAgICAgICAgICAgb3V0WzddID0gYVsxM107XHJcbiAgICAgICAgICAgIG91dFs4XSA9IGEwMjtcclxuICAgICAgICAgICAgb3V0WzldID0gYTEyO1xyXG4gICAgICAgICAgICBvdXRbMTFdID0gYVsxNF07XHJcbiAgICAgICAgICAgIG91dFsxMl0gPSBhMDM7XHJcbiAgICAgICAgICAgIG91dFsxM10gPSBhMTM7XHJcbiAgICAgICAgICAgIG91dFsxNF0gPSBhMjM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgICAgICBvdXRbMV0gPSBhWzRdO1xyXG4gICAgICAgICAgICBvdXRbMl0gPSBhWzhdO1xyXG4gICAgICAgICAgICBvdXRbM10gPSBhWzEyXTtcclxuICAgICAgICAgICAgb3V0WzRdID0gYVsxXTtcclxuICAgICAgICAgICAgb3V0WzVdID0gYVs1XTtcclxuICAgICAgICAgICAgb3V0WzZdID0gYVs5XTtcclxuICAgICAgICAgICAgb3V0WzddID0gYVsxM107XHJcbiAgICAgICAgICAgIG91dFs4XSA9IGFbMl07XHJcbiAgICAgICAgICAgIG91dFs5XSA9IGFbNl07XHJcbiAgICAgICAgICAgIG91dFsxMF0gPSBhWzEwXTtcclxuICAgICAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xyXG4gICAgICAgICAgICBvdXRbMTJdID0gYVszXTtcclxuICAgICAgICAgICAgb3V0WzEzXSA9IGFbN107XHJcbiAgICAgICAgICAgIG91dFsxNF0gPSBhWzExXTtcclxuICAgICAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLy9DYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XHJcbiAgICBzdGF0aWMgbm9ybWFsTWF0MyhvdXQsIGEpIHtcclxuICAgICAgICBsZXQgYTAwID0gYVswXSwgYTAxID0gYVsxXSwgYTAyID0gYVsyXSwgYTAzID0gYVszXSwgYTEwID0gYVs0XSwgYTExID0gYVs1XSwgYTEyID0gYVs2XSwgYTEzID0gYVs3XSwgYTIwID0gYVs4XSwgYTIxID0gYVs5XSwgYTIyID0gYVsxMF0sIGEyMyA9IGFbMTFdLCBhMzAgPSBhWzEyXSwgYTMxID0gYVsxM10sIGEzMiA9IGFbMTRdLCBhMzMgPSBhWzE1XSwgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTAsIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCwgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTEsIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMiwgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzAsIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCwgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzEsIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMiwgXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxyXG4gICAgICAgIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcclxuICAgICAgICBpZiAoIWRldClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xyXG4gICAgICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xyXG4gICAgICAgIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xyXG4gICAgICAgIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xyXG4gICAgICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xyXG4gICAgICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFs2XSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xyXG4gICAgICAgIG91dFs3XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xyXG4gICAgICAgIG91dFs4XSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXHJcbiAgICAvL1N0YXRpYyBPcGVyYXRpb25cclxuICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL2dyZWd0YXR1bS9tZG4tbW9kZWwtdmlldy1wcm9qZWN0aW9uL2Jsb2IvbWFzdGVyL3NoYXJlZC9tYXRyaWNlcy5qc1xyXG4gICAgc3RhdGljIG11bHRpcGx5VmVjdG9yKG1hdDQsIHYpIHtcclxuICAgICAgICBsZXQgeCA9IHZbMF0sIHkgPSB2WzFdLCB6ID0gdlsyXSwgdyA9IHZbM107XHJcbiAgICAgICAgbGV0IGMxcjEgPSBtYXQ0WzBdLCBjMnIxID0gbWF0NFsxXSwgYzNyMSA9IG1hdDRbMl0sIGM0cjEgPSBtYXQ0WzNdLCBjMXIyID0gbWF0NFs0XSwgYzJyMiA9IG1hdDRbNV0sIGMzcjIgPSBtYXQ0WzZdLCBjNHIyID0gbWF0NFs3XSwgYzFyMyA9IG1hdDRbOF0sIGMycjMgPSBtYXQ0WzldLCBjM3IzID0gbWF0NFsxMF0sIGM0cjMgPSBtYXQ0WzExXSwgYzFyNCA9IG1hdDRbMTJdLCBjMnI0ID0gbWF0NFsxM10sIGMzcjQgPSBtYXQ0WzE0XSwgYzRyNCA9IG1hdDRbMTVdO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHggKiBjMXIxICsgeSAqIGMxcjIgKyB6ICogYzFyMyArIHcgKiBjMXI0LFxyXG4gICAgICAgICAgICB4ICogYzJyMSArIHkgKiBjMnIyICsgeiAqIGMycjMgKyB3ICogYzJyNCxcclxuICAgICAgICAgICAgeCAqIGMzcjEgKyB5ICogYzNyMiArIHogKiBjM3IzICsgdyAqIGMzcjQsXHJcbiAgICAgICAgICAgIHggKiBjNHIxICsgeSAqIGM0cjIgKyB6ICogYzRyMyArIHcgKiBjNHI0LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICAvL2h0dHBzOi8vZ2l0aHViLmNvbS90b2ppL2dsLW1hdHJpeC9ibG9iL21hc3Rlci9zcmMvZ2wtbWF0cml4L3ZlYzQuanMsIHZlYzQudHJhbnNmb3JtTWF0NFxyXG4gICAgc3RhdGljIHRyYW5zZm9ybVZlYzQob3V0LCB2LCBtKSB7XHJcbiAgICAgICAgb3V0WzBdID0gbVswXSAqIHZbMF0gKyBtWzRdICogdlsxXSArIG1bOF0gKiB2WzJdICsgbVsxMl0gKiB2WzNdO1xyXG4gICAgICAgIG91dFsxXSA9IG1bMV0gKiB2WzBdICsgbVs1XSAqIHZbMV0gKyBtWzldICogdlsyXSArIG1bMTNdICogdlszXTtcclxuICAgICAgICBvdXRbMl0gPSBtWzJdICogdlswXSArIG1bNl0gKiB2WzFdICsgbVsxMF0gKiB2WzJdICsgbVsxNF0gKiB2WzNdO1xyXG4gICAgICAgIG91dFszXSA9IG1bM10gKiB2WzBdICsgbVs3XSAqIHZbMV0gKyBtWzExXSAqIHZbMl0gKyBtWzE1XSAqIHZbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8vRnJvbSBnbE1hdHJpeFxyXG4gICAgLy9NdWx0aXBsZSB0d28gbWF0NCB0b2dldGhlclxyXG4gICAgc3RhdGljIG11bHQob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgbGV0IGEwMCA9IGFbMF0sIGEwMSA9IGFbMV0sIGEwMiA9IGFbMl0sIGEwMyA9IGFbM10sIGExMCA9IGFbNF0sIGExMSA9IGFbNV0sIGExMiA9IGFbNl0sIGExMyA9IGFbN10sIGEyMCA9IGFbOF0sIGEyMSA9IGFbOV0sIGEyMiA9IGFbMTBdLCBhMjMgPSBhWzExXSwgYTMwID0gYVsxMl0sIGEzMSA9IGFbMTNdLCBhMzIgPSBhWzE0XSwgYTMzID0gYVsxNV07XHJcbiAgICAgICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XHJcbiAgICAgICAgbGV0IGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXTtcclxuICAgICAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgICAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgICAgICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICAgICAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICBiMCA9IGJbNF07XHJcbiAgICAgICAgYjEgPSBiWzVdO1xyXG4gICAgICAgIGIyID0gYls2XTtcclxuICAgICAgICBiMyA9IGJbN107XHJcbiAgICAgICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICAgICAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICAgICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgICAgICAgYjAgPSBiWzhdO1xyXG4gICAgICAgIGIxID0gYls5XTtcclxuICAgICAgICBiMiA9IGJbMTBdO1xyXG4gICAgICAgIGIzID0gYlsxMV07XHJcbiAgICAgICAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICAgICAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgICAgIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICBiMCA9IGJbMTJdO1xyXG4gICAgICAgIGIxID0gYlsxM107XHJcbiAgICAgICAgYjIgPSBiWzE0XTtcclxuICAgICAgICBiMyA9IGJbMTVdO1xyXG4gICAgICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgICAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgLy9TdGF0aWMgVHJhbnNmb3JtYXRpb25cclxuICAgIHN0YXRpYyBzY2FsZShvdXQsIHgsIHksIHopIHtcclxuICAgICAgICBvdXRbMF0gKj0geDtcclxuICAgICAgICBvdXRbMV0gKj0geDtcclxuICAgICAgICBvdXRbMl0gKj0geDtcclxuICAgICAgICBvdXRbM10gKj0geDtcclxuICAgICAgICBvdXRbNF0gKj0geTtcclxuICAgICAgICBvdXRbNV0gKj0geTtcclxuICAgICAgICBvdXRbNl0gKj0geTtcclxuICAgICAgICBvdXRbN10gKj0geTtcclxuICAgICAgICBvdXRbOF0gKj0gejtcclxuICAgICAgICBvdXRbOV0gKj0gejtcclxuICAgICAgICBvdXRbMTBdICo9IHo7XHJcbiAgICAgICAgb3V0WzExXSAqPSB6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBzdGF0aWMgcm90YXRlWShvdXQsIHJhZCkge1xyXG4gICAgICAgIGxldCBzID0gTWF0aC5zaW4ocmFkKSwgYyA9IE1hdGguY29zKHJhZCksIGEwMCA9IG91dFswXSwgYTAxID0gb3V0WzFdLCBhMDIgPSBvdXRbMl0sIGEwMyA9IG91dFszXSwgYTIwID0gb3V0WzhdLCBhMjEgPSBvdXRbOV0sIGEyMiA9IG91dFsxMF0sIGEyMyA9IG91dFsxMV07XHJcbiAgICAgICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xyXG4gICAgICAgIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xyXG4gICAgICAgIG91dFsyXSA9IGEwMiAqIGMgLSBhMjIgKiBzO1xyXG4gICAgICAgIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xyXG4gICAgICAgIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xyXG4gICAgICAgIG91dFs5XSA9IGEwMSAqIHMgKyBhMjEgKiBjO1xyXG4gICAgICAgIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcclxuICAgICAgICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIHN0YXRpYyByb3RhdGVYKG91dCwgcmFkKSB7XHJcbiAgICAgICAgbGV0IHMgPSBNYXRoLnNpbihyYWQpLCBjID0gTWF0aC5jb3MocmFkKSwgYTEwID0gb3V0WzRdLCBhMTEgPSBvdXRbNV0sIGExMiA9IG91dFs2XSwgYTEzID0gb3V0WzddLCBhMjAgPSBvdXRbOF0sIGEyMSA9IG91dFs5XSwgYTIyID0gb3V0WzEwXSwgYTIzID0gb3V0WzExXTtcclxuICAgICAgICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgICAgICAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XHJcbiAgICAgICAgb3V0WzVdID0gYTExICogYyArIGEyMSAqIHM7XHJcbiAgICAgICAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XHJcbiAgICAgICAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XHJcbiAgICAgICAgb3V0WzhdID0gYTIwICogYyAtIGExMCAqIHM7XHJcbiAgICAgICAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XHJcbiAgICAgICAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xyXG4gICAgICAgIG91dFsxMV0gPSBhMjMgKiBjIC0gYTEzICogcztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHJvdGF0ZVoob3V0LCByYWQpIHtcclxuICAgICAgICBsZXQgcyA9IE1hdGguc2luKHJhZCksIGMgPSBNYXRoLmNvcyhyYWQpLCBhMDAgPSBvdXRbMF0sIGEwMSA9IG91dFsxXSwgYTAyID0gb3V0WzJdLCBhMDMgPSBvdXRbM10sIGExMCA9IG91dFs0XSwgYTExID0gb3V0WzVdLCBhMTIgPSBvdXRbNl0sIGExMyA9IG91dFs3XTtcclxuICAgICAgICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgICAgICAgb3V0WzBdID0gYTAwICogYyArIGExMCAqIHM7XHJcbiAgICAgICAgb3V0WzFdID0gYTAxICogYyArIGExMSAqIHM7XHJcbiAgICAgICAgb3V0WzJdID0gYTAyICogYyArIGExMiAqIHM7XHJcbiAgICAgICAgb3V0WzNdID0gYTAzICogYyArIGExMyAqIHM7XHJcbiAgICAgICAgb3V0WzRdID0gYTEwICogYyAtIGEwMCAqIHM7XHJcbiAgICAgICAgb3V0WzVdID0gYTExICogYyAtIGEwMSAqIHM7XHJcbiAgICAgICAgb3V0WzZdID0gYTEyICogYyAtIGEwMiAqIHM7XHJcbiAgICAgICAgb3V0WzddID0gYTEzICogYyAtIGEwMyAqIHM7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIHN0YXRpYyByb3RhdGUob3V0LCByYWQsIGF4aXMpIHtcclxuICAgICAgICBsZXQgeCA9IGF4aXNbMF0sIHkgPSBheGlzWzFdLCB6ID0gYXhpc1syXSwgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiksIHMsIGMsIHQsIGEwMCwgYTAxLCBhMDIsIGEwMywgYTEwLCBhMTEsIGExMiwgYTEzLCBhMjAsIGEyMSwgYTIyLCBhMjMsIGIwMCwgYjAxLCBiMDIsIGIxMCwgYjExLCBiMTIsIGIyMCwgYjIxLCBiMjI7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGxlbikgPCAwLjAwMDAwMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgICB4ICo9IGxlbjtcclxuICAgICAgICB5ICo9IGxlbjtcclxuICAgICAgICB6ICo9IGxlbjtcclxuICAgICAgICBzID0gTWF0aC5zaW4ocmFkKTtcclxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICB0ID0gMSAtIGM7XHJcbiAgICAgICAgYTAwID0gb3V0WzBdO1xyXG4gICAgICAgIGEwMSA9IG91dFsxXTtcclxuICAgICAgICBhMDIgPSBvdXRbMl07XHJcbiAgICAgICAgYTAzID0gb3V0WzNdO1xyXG4gICAgICAgIGExMCA9IG91dFs0XTtcclxuICAgICAgICBhMTEgPSBvdXRbNV07XHJcbiAgICAgICAgYTEyID0gb3V0WzZdO1xyXG4gICAgICAgIGExMyA9IG91dFs3XTtcclxuICAgICAgICBhMjAgPSBvdXRbOF07XHJcbiAgICAgICAgYTIxID0gb3V0WzldO1xyXG4gICAgICAgIGEyMiA9IG91dFsxMF07XHJcbiAgICAgICAgYTIzID0gb3V0WzExXTtcclxuICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcclxuICAgICAgICBiMDAgPSB4ICogeCAqIHQgKyBjO1xyXG4gICAgICAgIGIwMSA9IHkgKiB4ICogdCArIHogKiBzO1xyXG4gICAgICAgIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xyXG4gICAgICAgIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO1xyXG4gICAgICAgIGIxMSA9IHkgKiB5ICogdCArIGM7XHJcbiAgICAgICAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XHJcbiAgICAgICAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7XHJcbiAgICAgICAgYjIxID0geSAqIHogKiB0IC0geCAqIHM7XHJcbiAgICAgICAgYjIyID0geiAqIHogKiB0ICsgYztcclxuICAgICAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcclxuICAgICAgICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XHJcbiAgICAgICAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xyXG4gICAgICAgIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcclxuICAgICAgICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XHJcbiAgICAgICAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xyXG4gICAgICAgIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcclxuICAgICAgICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XHJcbiAgICAgICAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xyXG4gICAgICAgIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcclxuICAgICAgICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xyXG4gICAgICAgIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW52ZXJ0KG91dCwgbWF0KSB7XHJcbiAgICAgICAgaWYgKG1hdCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBtYXQgPSBvdXQ7IC8vSWYgaW5wdXQgaXNuJ3Qgc2VudCwgdGhlbiBvdXRwdXQgaXMgYWxzbyBpbnB1dFxyXG4gICAgICAgIGxldCBhMDAgPSBtYXRbMF0sIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLCBhMDMgPSBtYXRbM10sIGExMCA9IG1hdFs0XSwgYTExID0gbWF0WzVdLCBhMTIgPSBtYXRbNl0sIGExMyA9IG1hdFs3XSwgYTIwID0gbWF0WzhdLCBhMjEgPSBtYXRbOV0sIGEyMiA9IG1hdFsxMF0sIGEyMyA9IG1hdFsxMV0sIGEzMCA9IG1hdFsxMl0sIGEzMSA9IG1hdFsxM10sIGEzMiA9IG1hdFsxNF0sIGEzMyA9IG1hdFsxNV0sIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMCwgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwLCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTAsIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMSwgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTIsIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMCwgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwLCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzAsIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMSwgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzIsIFxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuICAgICAgICBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcbiAgICAgICAgaWYgKCFkZXQpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XHJcbiAgICAgICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xyXG4gICAgICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcclxuICAgICAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcclxuICAgICAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvL2h0dHBzOi8vZ2l0aHViLmNvbS90b2ppL2dsLW1hdHJpeC9ibG9iL21hc3Rlci9zcmMvZ2wtbWF0cml4L21hdDQuanMgIG1hdDQuc2NhbGFyLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uIChvdXQsIGEsIHYpIHtcclxuICAgIHN0YXRpYyB0cmFuc2xhdGUob3V0LCB4LCB5LCB6KSB7XHJcbiAgICAgICAgb3V0WzEyXSA9IG91dFswXSAqIHggKyBvdXRbNF0gKiB5ICsgb3V0WzhdICogeiArIG91dFsxMl07XHJcbiAgICAgICAgb3V0WzEzXSA9IG91dFsxXSAqIHggKyBvdXRbNV0gKiB5ICsgb3V0WzldICogeiArIG91dFsxM107XHJcbiAgICAgICAgb3V0WzE0XSA9IG91dFsyXSAqIHggKyBvdXRbNl0gKiB5ICsgb3V0WzEwXSAqIHogKyBvdXRbMTRdO1xyXG4gICAgICAgIG91dFsxNV0gPSBvdXRbM10gKiB4ICsgb3V0WzddICogeSArIG91dFsxMV0gKiB6ICsgb3V0WzE1XTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBNYXRoVXRpbCxcclxuICAgIFZlY3RvcjMsXHJcbiAgICBNYXRyaXg0LFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGliL01hdGgudHMiXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.CameraController = exports.Camera = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Transform = __webpack_require__(1);\\n\\nvar TRANSFORM = _interopRequireWildcard(_Transform);\\n\\nvar _Math = __webpack_require__(3);\\n\\nvar MATH = _interopRequireWildcard(_Math);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Transform = TRANSFORM.Transform;\\nvar Matrix4 = MATH.Matrix4;\\n\\nvar Camera = exports.Camera = function () {\\n    function Camera(gl) {\\n        var fov = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 45;\\n        var near = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\\n        var far = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100.0;\\n\\n        _classCallCheck(this, Camera);\\n\\n        //Setup the perspective matrix\\n        this.projectionMatrix = new Float32Array(16);\\n        var ratio = gl.canvas.width / gl.canvas.height;\\n        Matrix4.perspective(this.projectionMatrix, fov, ratio, near, far);\\n        this.transform = new Transform(); //Setup transform to control the position of the camera\\n        this.viewMatrix = new Float32Array(16); //Cache the matrix that will hold the inverse of the transform.\\n        this.mode = Camera.MODE_ORBIT; //Set what sort of control mode to use.\\n    }\\n\\n    _createClass(Camera, [{\\n        key: 'panX',\\n        value: function panX(v) {\\n            if (this.mode == Camera.MODE_ORBIT) return; // Panning on the X Axis is only allowed when in free mode\\n            this.updateViewMatrix();\\n            this.transform.position.x += this.transform.right[0] * v;\\n            this.transform.position.y += this.transform.right[1] * v;\\n            this.transform.position.z += this.transform.right[2] * v;\\n        }\\n    }, {\\n        key: 'panY',\\n        value: function panY(v) {\\n            this.updateViewMatrix();\\n            this.transform.position.y += this.transform.up[1] * v;\\n            if (this.mode == Camera.MODE_ORBIT) return; //Can only move up and down the y axix in orbit mode\\n            this.transform.position.x += this.transform.up[0] * v;\\n            this.transform.position.z += this.transform.up[2] * v;\\n        }\\n    }, {\\n        key: 'panZ',\\n        value: function panZ(v) {\\n            this.updateViewMatrix();\\n            if (this.mode == Camera.MODE_ORBIT) {\\n                this.transform.position.z += v; //orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\\n            } else {\\n                //in freemode to move forward, we need to move based on our forward which is relative to our current rotation\\n                this.transform.position.x += this.transform.forward[0] * v;\\n                this.transform.position.y += this.transform.forward[1] * v;\\n                this.transform.position.z += this.transform.forward[2] * v;\\n            }\\n        }\\n        //To have different modes of movements, this function handles the view matrix update for the transform object.\\n\\n    }, {\\n        key: 'updateViewMatrix',\\n        value: function updateViewMatrix() {\\n            //Optimize camera transform update, no need for scale nor rotateZ\\n            if (this.mode == Camera.MODE_FREE) {\\n                this.transform.matView.reset().vtranslate(this.transform.position).rotateX(this.transform.rotation.x * Transform.deg2Rad).rotateY(this.transform.rotation.y * Transform.deg2Rad);\\n            } else {\\n                this.transform.matView.reset().rotateX(this.transform.rotation.x * Transform.deg2Rad).rotateY(this.transform.rotation.y * Transform.deg2Rad).vtranslate(this.transform.position);\\n            }\\n            this.transform.updateDirection();\\n            //Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\\n            Matrix4.invert(this.viewMatrix, this.transform.matView.raw);\\n            return this.viewMatrix;\\n        }\\n    }, {\\n        key: 'getTranslatelessMatrix',\\n        value: function getTranslatelessMatrix() {\\n            var mat = new Float32Array(this.viewMatrix);\\n            mat[12] = mat[13] = mat[14] = 0.0; //Reset Translation position in the Matrix to zero.\\n            return mat;\\n        }\\n    }]);\\n\\n    return Camera;\\n}();\\n\\nCamera.MODE_FREE = 0; //Allows free movement of position and rotation, basicly first person type of camera\\nCamera.MODE_ORBIT = 1; //Movement is locked to rotate around the origin, Great for 3d editors or a single model viewer\\n//Movement is locked to rotate around the origin, Great for 3d editors or a single model viewer\\n\\nvar CameraController = exports.CameraController = function () {\\n    function CameraController(gl, camera) {\\n        _classCallCheck(this, CameraController);\\n\\n        var oThis = this;\\n        var box = gl.canvas.getBoundingClientRect();\\n        this.canvas = gl.canvas; //Need access to the canvas html element, main to access events\\n        this.camera = camera; //Reference to the camera to control\\n        this.rotateRate = -300; //How fast to rotate, degrees per dragging delta\\n        this.panRate = 5; //How fast to pan, max unit per dragging delta\\n        this.zoomRate = 200; //How fast to zoom or can be viewed as forward/backward movement\\n        this.offsetX = box.left; //Help calc global x,y mouse cords.\\n        this.offsetY = box.top;\\n        this.initX = 0; //Starting X,Y position on mouse down\\n        this.initY = 0;\\n        this.prevX = 0; //Previous X,Y position on mouse move\\n        this.prevY = 0;\\n        this.onUpHandler = function (e) {\\n            oThis.onMouseUp(e);\\n        }; //Cache func reference that gets bound and unbound a lot\\n        this.onMoveHandler = function (e) {\\n            oThis.onMouseMove(e);\\n        };\\n        this.canvas.addEventListener('mousedown', function (e) {\\n            oThis.onMouseDown(e);\\n        }); //Initializes the up and move events\\n        this.canvas.addEventListener('mousewheel', function (e) {\\n            oThis.onMouseWheel(e);\\n        }); //Handles zoom/forward movement\\n    }\\n    //Transform mouse x,y cords to something useable by the canvas.\\n\\n\\n    _createClass(CameraController, [{\\n        key: 'getMouseVec2',\\n        value: function getMouseVec2(e) {\\n            return { x: e.pageX - this.offsetX, y: e.pageY - this.offsetY };\\n        }\\n        //Begin listening for dragging movement\\n\\n    }, {\\n        key: 'onMouseDown',\\n        value: function onMouseDown(e) {\\n            this.initX = this.prevX = e.pageX - this.offsetX;\\n            this.initY = this.prevY = e.pageY - this.offsetY;\\n            this.canvas.addEventListener('mouseup', this.onUpHandler);\\n            this.canvas.addEventListener('mousemove', this.onMoveHandler);\\n        }\\n        //End listening for dragging movement\\n\\n    }, {\\n        key: 'onMouseUp',\\n        value: function onMouseUp(e) {\\n            this.canvas.removeEventListener('mouseup', this.onUpHandler);\\n            this.canvas.removeEventListener('mousemove', this.onMoveHandler);\\n        }\\n    }, {\\n        key: 'onMouseWheel',\\n        value: function onMouseWheel(e) {\\n            var delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.detail)); //Try to map wheel movement to a number between -1 and 1\\n            this.camera.panZ(delta * (this.zoomRate / this.canvas.height)); //Keep the movement speed the same, no matter the height diff\\n        }\\n    }, {\\n        key: 'onMouseMove',\\n        value: function onMouseMove(e) {\\n            var x = e.pageX - this.offsetX,\\n                //Get X,y where the canvas's position is origin.\\n            y = e.pageY - this.offsetY,\\n                dx = x - this.prevX,\\n                //Difference since last mouse move\\n            dy = y - this.prevY;\\n            //When shift is being helt down, we pan around else we rotate.\\n            if (!e.shiftKey) {\\n                this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width);\\n                this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height);\\n            } else {\\n                this.camera.panX(-dx * (this.panRate / this.canvas.width));\\n                this.camera.panY(dy * (this.panRate / this.canvas.height));\\n            }\\n            this.prevX = x;\\n            this.prevY = y;\\n        }\\n    }]);\\n\\n    return CameraController;\\n}();\\n\\nexports.default = {\\n    Camera: Camera,\\n    CameraController: CameraController\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.GridFloor = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Transform = __webpack_require__(1);\\n\\nvar TRANSFORM = _interopRequireWildcard(_Transform);\\n\\nvar _gl = __webpack_require__(0);\\n\\nvar GL = _interopRequireWildcard(_gl);\\n\\nvar _Shaders = __webpack_require__(2);\\n\\nvar SHADER = _interopRequireWildcard(_Shaders);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Transform = TRANSFORM.Transform;\\nvar ATTR_POSITION_NAME = GL.ATTR_POSITION_NAME,\\n    ATTR_POSITION_LOC = GL.ATTR_POSITION_LOC,\\n    ATTR_NORMAL_NAME = GL.ATTR_NORMAL_NAME,\\n    ATTR_NORMAL_LOC = GL.ATTR_NORMAL_LOC,\\n    ATTR_UV_NAME = GL.ATTR_UV_NAME,\\n    ATTR_UV_LOC = GL.ATTR_UV_LOC;\\nvar ShaderUtil = SHADER.ShaderUtil;\\n\\nvar GridFloor = exports.GridFloor = function () {\\n    function GridFloor(gl) {\\n        var incAxis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n        _classCallCheck(this, GridFloor);\\n\\n        this.transform = new Transform();\\n        this.gl = gl;\\n        this.createMesh(gl, incAxis);\\n        this.createShader();\\n    }\\n\\n    _createClass(GridFloor, [{\\n        key: 'createShader',\\n        value: function createShader() {\\n            var vShader = '#version 300 es\\\\n' + 'in vec3 a_position;' + 'layout(location=4) in float a_color;' + 'uniform mat4 uPMatrix;' + 'uniform mat4 uMVMatrix;' + 'uniform mat4 uCameraMatrix;' + 'uniform vec3 uColorAry[4];' + 'out lowp vec4 color;' + 'void main(void){' + 'color = vec4(uColorAry[ int(a_color) ],1.0);' + 'gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);' + '}';\\n            var fShader = '#version 300 es\\\\n' + 'precision mediump float;' + 'in vec4 color;' + 'out vec4 finalColor;' + 'void main(void){ finalColor = color; }';\\n            //........................................\\n            this.mShader = ShaderUtil.createProgramFromText(this.gl, vShader, fShader, true);\\n            this.mUniformColor = this.gl.getUniformLocation(this.mShader, 'uColorAry');\\n            this.mUniformProj = this.gl.getUniformLocation(this.mShader, 'uPMatrix');\\n            this.mUniformCamera = this.gl.getUniformLocation(this.mShader, 'uCameraMatrix');\\n            this.mUniformModelV = this.gl.getUniformLocation(this.mShader, 'uMVMatrix');\\n            //........................................\\n            //Save colors in the shader. Should only need to render once.\\n            this.gl.useProgram(this.mShader);\\n            this.gl.uniform3fv(this.mUniformColor, new Float32Array([0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1]));\\n            this.gl.useProgram(null);\\n        }\\n    }, {\\n        key: 'render',\\n        value: function render(camera) {\\n            //Update Transform Matrix (Modal View)\\n            this.transform.updateMatrix();\\n            //Prepare Shader\\n            this.gl.useProgram(this.mShader);\\n            this.gl.bindVertexArray(this.mesh.vao);\\n            //Push Uniforms\\n            this.gl.uniformMatrix4fv(this.mUniformProj, false, camera.projectionMatrix);\\n            this.gl.uniformMatrix4fv(this.mUniformCamera, false, camera.viewMatrix);\\n            this.gl.uniformMatrix4fv(this.mUniformModelV, false, this.transform.getViewMatrix());\\n            //Draw Grid\\n            //this.gl.drawElements(this.mesh.drawMode, this.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\\n            this.gl.drawArrays(this.mesh.drawMode, 0, this.mesh.vertexCount);\\n            //Cleanup\\n            this.gl.bindVertexArray(null);\\n            this.gl.useProgram(null);\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl, incAxis) {\\n            //Dynamiclly create a grid\\n            var verts = [],\\n                size = 2,\\n                // W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\\n            div = 10.0,\\n                // How to divide up the grid\\n            step = size / div,\\n                // Steps between each line, just a number we increment by for each line in the grid.\\n            half = size / 2; // From origin the starting position is half the size.\\n            var p = void 0; //Temp variable for position value.\\n            for (var i = 0; i <= div; i++) {\\n                //Vertical line\\n                p = -half + i * step;\\n                verts.push(p); //x1\\n                verts.push(0); //y1 verts.push(half);\\n                verts.push(half); //z1 verts.push(0);\\n                verts.push(0); //c2\\n                verts.push(p); //x2\\n                verts.push(0); //y2 verts.push(-half);\\n                verts.push(-half); //z2 verts.push(0);\\n                verts.push(0); //c2 verts.push(1);\\n                //Horizontal line\\n                p = half - i * step;\\n                verts.push(-half); //x1\\n                verts.push(0); //y1 verts.push(p);\\n                verts.push(p); //z1 verts.push(0);\\n                verts.push(0); //c1\\n                verts.push(half); //x2\\n                verts.push(0); //y2 verts.push(p);\\n                verts.push(p); //z2 verts.push(0);\\n                verts.push(0); //c2 verts.push(1);\\n            }\\n            if (incAxis) {\\n                //x axis\\n                verts.push(-1.1); //x1\\n                verts.push(0); //y1\\n                verts.push(0); //z1\\n                verts.push(1); //c2\\n                verts.push(1.1); //x2\\n                verts.push(0); //y2\\n                verts.push(0); //z2\\n                verts.push(1); //c2\\n                //y axis\\n                verts.push(0); //x1\\n                verts.push(-1.1); //y1\\n                verts.push(0); //z1\\n                verts.push(2); //c2\\n                verts.push(0); //x2\\n                verts.push(1.1); //y2\\n                verts.push(0); //z2\\n                verts.push(2); //c2\\n                //z axis\\n                verts.push(0); //x1\\n                verts.push(0); //y1\\n                verts.push(-1.1); //z1\\n                verts.push(3); //c2\\n                verts.push(0); //x2\\n                verts.push(0); //y2\\n                verts.push(1.1); //z2\\n                verts.push(3); //c2\\n            }\\n            //Setup\\n            var attrColorLoc = 4,\\n                strideLen = void 0,\\n                mesh = { drawMode: gl.LINES, vao: gl.createVertexArray() };\\n            //Do some math\\n            mesh.vertexComponentLen = 4;\\n            mesh.vertexCount = verts.length / mesh.vertexComponentLen;\\n            strideLen = Float32Array.BYTES_PER_ELEMENT * mesh.vertexComponentLen; //Stride Length is the Vertex Size for the buffer in Bytes\\n            //Setup our Buffer\\n            mesh.bufVertices = gl.createBuffer();\\n            gl.bindVertexArray(mesh.vao);\\n            gl.bindBuffer(gl.ARRAY_BUFFER, mesh.bufVertices);\\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts), gl.STATIC_DRAW);\\n            gl.enableVertexAttribArray(ATTR_POSITION_LOC);\\n            gl.enableVertexAttribArray(attrColorLoc);\\n            gl.vertexAttribPointer(ATTR_POSITION_LOC, 3, gl.FLOAT, false, strideLen, 0);\\n            gl.vertexAttribPointer(attrColorLoc, 1, gl.FLOAT, false, strideLen, Float32Array.BYTES_PER_ELEMENT * 3);\\n            //Cleanup and Finalize\\n            gl.bindVertexArray(null);\\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\\n            gl.mMeshCache['grid'] = mesh;\\n            this.mesh = mesh;\\n        }\\n    }]);\\n\\n    return GridFloor;\\n}();\\n\\nexports.default = {\\n    GridFloor: GridFloor\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.GridAxis = exports.MultiQuad = exports.Quad = exports.Cube = exports.CubeBad = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Model = __webpack_require__(13);\\n\\nvar MODEL = _interopRequireWildcard(_Model);\\n\\nvar _gl = __webpack_require__(0);\\n\\nvar GL = _interopRequireWildcard(_gl);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Model = MODEL.Model;\\nvar ATTR_POSITION_NAME = GL.ATTR_POSITION_NAME,\\n    ATTR_POSITION_LOC = GL.ATTR_POSITION_LOC,\\n    ATTR_NORMAL_NAME = GL.ATTR_NORMAL_NAME,\\n    ATTR_NORMAL_LOC = GL.ATTR_NORMAL_LOC,\\n    ATTR_UV_NAME = GL.ATTR_UV_NAME,\\n    ATTR_UV_LOC = GL.ATTR_UV_LOC;\\n\\nvar CubeBad = exports.CubeBad = function () {\\n    function CubeBad() {\\n        _classCallCheck(this, CubeBad);\\n    }\\n\\n    _createClass(CubeBad, null, [{\\n        key: 'createModal',\\n        value: function createModal(gl) {\\n            return new Model(CubeBad.createMesh(gl));\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl) {\\n            var aVert = [-0.5, 0.5, 0, 0, -0.5, -0.5, 0, 0, 0.5, -0.5, 0, 0, 0.5, 0.5, 0, 0, 0.5, 0.5, -1, 1, 0.5, -0.5, -1, 1, -0.5, -0.5, -1, 1, -0.5, 0.5, -1, 1],\\n                aUV = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],\\n                aIndex = [0, 1, 2, 2, 3, 0, 4, 5, 6, 6, 7, 4, 3, 2, 5, 5, 4, 3, 7, 0, 3, 3, 4, 7, 7, 6, 1, 1, 0, 7];\\n            return gl.fCreateMeshVAO('CubeBad', aIndex, aVert, null, aUV, 4);\\n        }\\n    }]);\\n\\n    return CubeBad;\\n}();\\n\\nvar Cube = exports.Cube = function () {\\n    function Cube() {\\n        _classCallCheck(this, Cube);\\n    }\\n\\n    _createClass(Cube, null, [{\\n        key: 'createModal',\\n        value: function createModal(gl, name, keepRawData) {\\n            return new Model(Cube.createMesh(gl, name || 'Cube', 1, 1, 1, 0, 0, 0, keepRawData));\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl, name, width, height, depth, x, y, z, keepRawData) {\\n            var w = width * 0.5,\\n                h = height * 0.5,\\n                d = depth * 0.5;\\n            var x0 = x - w,\\n                x1 = x + w,\\n                y0 = y - h,\\n                y1 = y + h,\\n                z0 = z - d,\\n                z1 = z + d;\\n            //Starting bottom left corner, then working counter clockwise to create the front face.\\n            //Backface is the first face but in reverse (3,2,1,0)\\n            //keep each quad face built the same way to make index and uv easier to assign\\n            var aVert = [x0, y1, z1, 0, x0, y0, z1, 0, x1, y0, z1, 0, x1, y1, z1, 0, x1, y1, z0, 1, x1, y0, z0, 1, x0, y0, z0, 1, x0, y1, z0, 1, x0, y1, z0, 2, x0, y0, z0, 2, x0, y0, z1, 2, x0, y1, z1, 2, x0, y0, z1, 3, x0, y0, z0, 3, x1, y0, z0, 3, x1, y0, z1, 3, x1, y1, z1, 4, x1, y0, z1, 4, x1, y0, z0, 4, x1, y1, z0, 4, x0, y1, z0, 5, x0, y1, z1, 5, x1, y1, z1, 5, x1, y1, z0, 5];\\n            //Build the index of each quad [0,1,2, 2,3,0]\\n            var aIndex = [];\\n            for (var i = 0; i < aVert.length / 4; i += 2) {\\n                aIndex.push(i, i + 1, Math.floor(i / 4) * 4 + (i + 2) % 4);\\n            } //Build UV data for each vertex\\n            var aUV = [];\\n            for (var _i = 0; _i < 6; _i++) {\\n                aUV.push(0, 0, 0, 1, 1, 1, 1, 0);\\n            } //Build Normal data for each vertex\\n            var aNorm = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0];\\n            var mesh = gl.fCreateMeshVAO(name, aIndex, aVert, aNorm, aUV, 4);\\n            mesh.noCulling = true; //TODO Only setting this true to view animations better.\\n            if (keepRawData) {\\n                mesh.aIndex = aIndex;\\n                mesh.aVert = aVert;\\n                mesh.aNorm = aNorm;\\n            }\\n            return mesh;\\n        }\\n    }]);\\n\\n    return Cube;\\n}();\\n\\nvar Quad = exports.Quad = function () {\\n    function Quad() {\\n        _classCallCheck(this, Quad);\\n    }\\n\\n    _createClass(Quad, null, [{\\n        key: 'createModal',\\n        value: function createModal(gl) {\\n            return new Model(Quad.createMesh(gl));\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl) {\\n            var aVert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0],\\n                aUV = [0, 0, 0, 1, 1, 1, 1, 0],\\n                aIndex = [0, 1, 2, 2, 3, 0];\\n            var mesh = gl.fCreateMeshVAO('Quad', aIndex, aVert, null, aUV);\\n            mesh.noCulling = true;\\n            mesh.doBlending = true;\\n            return mesh;\\n        }\\n    }]);\\n\\n    return Quad;\\n}();\\n\\nvar MultiQuad = exports.MultiQuad = function () {\\n    function MultiQuad() {\\n        _classCallCheck(this, MultiQuad);\\n    }\\n\\n    _createClass(MultiQuad, null, [{\\n        key: 'createModal',\\n        value: function createModal(gl) {\\n            return new Model(MultiQuad.createMesh(gl));\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl) {\\n            var aIndex = [],\\n                //0,1,2, 2,3,0\\n            aUV = [],\\n                //0,0, 0,1, 1,1, 1,0\\n            aVert = [];\\n            for (var i = 0; i < 10; i++) {\\n                //Calculate a random size, y rotation and position for the quad\\n                var size = 0.2 + 0.8 * Math.random(),\\n                    //Random Quad Size in the range of 0.2 - 1.0\\n                half = size * 0.5,\\n                    //Half of size, this is the radius for rotation\\n                angle = Math.PI * 2 * Math.random(),\\n                    //Random angle between 0 - 360 degrees in radians\\n                dx = half * Math.cos(angle),\\n                    //Calc the x distance, used as an offset for the random position\\n                dy = half * Math.sin(angle),\\n                    //Calc the y distance, for same offset but used in z\\n                x = -2.5 + Math.random() * 5,\\n                    //Random position between -2.5 - 2.5\\n                y = -2.5 + Math.random() * 5,\\n                    z = 2.5 - Math.random() * 5,\\n                    p = i * 4; //Index of the first vertex of a quad\\n                //Build the 4 points of the quad\\n                aVert.push(x - dx, y + half, z - dy); //TOP LEFT\\n                aVert.push(x - dx, y - half, z - dy); //BOTTOM LEFT\\n                aVert.push(x + dx, y - half, z + dy); //BOTTOM RIGHT\\n                aVert.push(x + dx, y + half, z + dy); //TOP RIGHT\\n                aUV.push(0, 0, 0, 1, 1, 1, 1, 0); //Quad's UV\\n                aIndex.push(p, p + 1, p + 2, p + 2, p + 3, p); //Quad's Index\\n            }\\n            var mesh = gl.fCreateMeshVAO('MultiQuad', aIndex, aVert, null, aUV);\\n            mesh.noCulling = true;\\n            mesh.doBlending = true;\\n            return mesh;\\n        }\\n    }]);\\n\\n    return MultiQuad;\\n}();\\n\\nvar GridAxis = exports.GridAxis = function () {\\n    function GridAxis() {\\n        _classCallCheck(this, GridAxis);\\n    }\\n\\n    _createClass(GridAxis, null, [{\\n        key: 'createModal',\\n        value: function createModal(gl, incAxis) {\\n            return new Model(GridAxis.createMesh(gl, incAxis));\\n        }\\n    }, {\\n        key: 'createMesh',\\n        value: function createMesh(gl, incAxis) {\\n            //Dynamiclly create a grid\\n            var verts = [],\\n                size = 2,\\n                // W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\\n            div = 10.0,\\n                // How to divide up the grid\\n            step = size / div,\\n                // Steps between each line, just a number we increment by for each line in the grid.\\n            half = size / 2; // From origin the starting position is half the size.\\n            var p = void 0; //Temp variable for position value.\\n            for (var i = 0; i <= div; i++) {\\n                //Vertical line\\n                p = -half + i * step;\\n                verts.push(p); //x1\\n                verts.push(0); //y1 verts.push(half);\\n                verts.push(half); //z1 verts.push(0);\\n                verts.push(0); //c2\\n                verts.push(p); //x2\\n                verts.push(0); //y2 verts.push(-half);\\n                verts.push(-half); //z2 verts.push(0);\\n                verts.push(0); //c2 verts.push(1);\\n                //Horizontal line\\n                p = half - i * step;\\n                verts.push(-half); //x1\\n                verts.push(0); //y1 verts.push(p);\\n                verts.push(p); //z1 verts.push(0);\\n                verts.push(0); //c1\\n                verts.push(half); //x2\\n                verts.push(0); //y2 verts.push(p);\\n                verts.push(p); //z2 verts.push(0);\\n                verts.push(0); //c2 verts.push(1);\\n            }\\n            if (incAxis) {\\n                //x axis\\n                verts.push(-1.1); //x1\\n                verts.push(0); //y1\\n                verts.push(0); //z1\\n                verts.push(1); //c2\\n                verts.push(1.1); //x2\\n                verts.push(0); //y2\\n                verts.push(0); //z2\\n                verts.push(1); //c2\\n                //y axis\\n                verts.push(0); //x1\\n                verts.push(-1.1); //y1\\n                verts.push(0); //z1\\n                verts.push(2); //c2\\n                verts.push(0); //x2\\n                verts.push(1.1); //y2\\n                verts.push(0); //z2\\n                verts.push(2); //c2\\n                //z axis\\n                verts.push(0); //x1\\n                verts.push(0); //y1\\n                verts.push(-1.1); //z1\\n                verts.push(3); //c2\\n                verts.push(0); //x2\\n                verts.push(0); //y2\\n                verts.push(1.1); //z2\\n                verts.push(3); //c2\\n            }\\n            //Setup\\n            var attrColorLoc = 4,\\n                strideLen = void 0,\\n                mesh = { drawMode: gl.LINES, vao: gl.createVertexArray() };\\n            //Do some math\\n            mesh.vertexComponentLen = 4;\\n            mesh.vertexCount = verts.length / mesh.vertexComponentLen;\\n            strideLen = Float32Array.BYTES_PER_ELEMENT * mesh.vertexComponentLen; //Stride Length is the Vertex Size for the buffer in Bytes\\n            //Setup our Buffer\\n            mesh.bufVertices = gl.createBuffer();\\n            gl.bindVertexArray(mesh.vao);\\n            gl.bindBuffer(gl.ARRAY_BUFFER, mesh.bufVertices);\\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts), gl.STATIC_DRAW);\\n            gl.enableVertexAttribArray(ATTR_POSITION_LOC);\\n            gl.enableVertexAttribArray(attrColorLoc);\\n            gl.vertexAttribPointer(ATTR_POSITION_LOC //Attribute Location\\n            , 3 //How big is the vector by number count\\n            , gl.FLOAT //What type of number we passing in\\n            , false //Does it need to be normalized?\\n            , strideLen //How big is a vertex chunk of data.\\n            , 0);\\n            gl.vertexAttribPointer(attrColorLoc //new shader has \\\"in float a_color\\\" as the second attrib\\n            , 1 //This atttrib is just a single float\\n            , gl.FLOAT, false, strideLen //Each vertex chunk is 4 floats long\\n            , Float32Array.BYTES_PER_ELEMENT * 3);\\n            //Cleanup and Finalize\\n            gl.bindVertexArray(null);\\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\\n            gl.mMeshCache['grid'] = mesh;\\n            return mesh;\\n        }\\n    }]);\\n\\n    return GridAxis;\\n}();\\n\\nexports.default = {\\n    CubeBad: CubeBad,\\n    Cube: Cube,\\n    Quad: Quad,\\n    MultiQuad: MultiQuad,\\n    GridAxis: GridAxis\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/*NOTES:\\r\\nTutorial on how to control FPS :: http://codetheory.in/controlling-the-frame-rate-with-requestanimationframe/\\r\\n\\r\\nEXAMPLE:\\r\\nrloop = new RenderLoop(function(dt){\\r\\n    console.log(rloop.fps + \\\" \\\" + dt);\\r\\n},10).start();\\r\\n*/\\n/*NOTES:\\r\\nTutorial on how to control FPS :: http://codetheory.in/controlling-the-frame-rate-with-requestanimationframe/\\r\\n\\r\\nEXAMPLE:\\r\\nrloop = new RenderLoop(function(dt){\\r\\n    console.log(rloop.fps + \\\" \\\" + dt);\\r\\n},10).start();\\r\\n*/var RenderLoop = exports.RenderLoop = function () {\\n    function RenderLoop(callback, fps) {\\n        _classCallCheck(this, RenderLoop);\\n\\n        var oThis = this;\\n        this.msLastFrame = null; //The time in Miliseconds of the last frame.\\n        this.callBack = callback; //What function to call for each frame\\n        this.isActive = false; //Control the On/Off state of the render loop\\n        this.fps = 0; //Save the value of how fast the loop is going.\\n        //if(!fps && fps > 0){ //Build a run method that limits the framerate\\n        if (fps != undefined && fps > 0) {\\n            this.msFpsLimit = 1000 / fps; //Calc how many milliseconds per frame in one second of time.\\n            this.run = function () {\\n                //Calculate Deltatime between frames and the FPS currently.\\n                var msCurrent = performance.now(),\\n                    msDelta = msCurrent - oThis.msLastFrame,\\n                    deltaTime = msDelta / 1000.0; //What fraction of a single second is the delta time\\n                if (msDelta >= oThis.msFpsLimit) {\\n                    oThis.fps = Math.floor(1 / deltaTime);\\n                    oThis.msLastFrame = msCurrent;\\n                    oThis.callBack(deltaTime);\\n                }\\n                if (oThis.isActive) window.requestAnimationFrame(oThis.run);\\n            };\\n        } else {\\n            this.run = function () {\\n                //Calculate Deltatime between frames and the FPS currently.\\n                var msCurrent = performance.now(),\\n                    //Gives you the whole number of how many milliseconds since the dawn of time :)\\n                deltaTime = (msCurrent - oThis.msLastFrame) / 1000.0; //ms between frames, Then / by 1 second to get the fraction of a second.\\n                //Now execute frame since the time has elapsed.\\n                oThis.fps = Math.floor(1 / deltaTime); //Time it took to generate one frame, divide 1 by that to get how many frames in one second.\\n                oThis.msLastFrame = msCurrent;\\n                oThis.callBack(deltaTime);\\n                if (oThis.isActive) window.requestAnimationFrame(oThis.run);\\n            };\\n        }\\n    }\\n\\n    _createClass(RenderLoop, [{\\n        key: \\\"start\\\",\\n        value: function start() {\\n            this.isActive = true;\\n            this.msLastFrame = performance.now();\\n            window.requestAnimationFrame(this.run);\\n            return this;\\n        }\\n    }, {\\n        key: \\\"stop\\\",\\n        value: function stop() {\\n            this.isActive = false;\\n        }\\n    }]);\\n\\n    return RenderLoop;\\n}();\\n\\nexports.default = {\\n    RenderLoop: RenderLoop\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL1JlbmRlckxvb3AudHM/YmUzMiJdLCJuYW1lcyI6WyJSZW5kZXJMb29wIiwiY2FsbGJhY2siLCJmcHMiLCJvVGhpcyIsIm1zTGFzdEZyYW1lIiwiY2FsbEJhY2siLCJpc0FjdGl2ZSIsInVuZGVmaW5lZCIsIm1zRnBzTGltaXQiLCJydW4iLCJtc0N1cnJlbnQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIm1zRGVsdGEiLCJkZWx0YVRpbWUiLCJNYXRoIiwiZmxvb3IiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFRQTs7Ozs7OztNQU9nQkEsVSxXQUFBQSxVO0FBQ1osd0JBQVlDLFFBQVosRUFBc0JDLEdBQXRCLEVBQTJCO0FBQUE7O0FBQ3ZCLFlBQUlDLFFBQVEsSUFBWjtBQUNBLGFBQUtDLFdBQUwsR0FBbUIsSUFBbkIsQ0FGdUIsQ0FFRTtBQUN6QixhQUFLQyxRQUFMLEdBQWdCSixRQUFoQixDQUh1QixDQUdHO0FBQzFCLGFBQUtLLFFBQUwsR0FBZ0IsS0FBaEIsQ0FKdUIsQ0FJQTtBQUN2QixhQUFLSixHQUFMLEdBQVcsQ0FBWCxDQUx1QixDQUtUO0FBQ2Q7QUFDQSxZQUFJQSxPQUFPSyxTQUFQLElBQW9CTCxNQUFNLENBQTlCLEVBQWlDO0FBQzdCLGlCQUFLTSxVQUFMLEdBQWtCLE9BQU9OLEdBQXpCLENBRDZCLENBQ0M7QUFDOUIsaUJBQUtPLEdBQUwsR0FBVyxZQUFZO0FBQ25CO0FBQ0Esb0JBQUlDLFlBQVlDLFlBQVlDLEdBQVosRUFBaEI7QUFBQSxvQkFBbUNDLFVBQVdILFlBQVlQLE1BQU1DLFdBQWhFO0FBQUEsb0JBQThFVSxZQUFZRCxVQUFVLE1BQXBHLENBRm1CLENBRXlGO0FBQzVHLG9CQUFJQSxXQUFXVixNQUFNSyxVQUFyQixFQUFpQztBQUM3QkwsMEJBQU1ELEdBQU4sR0FBWWEsS0FBS0MsS0FBTCxDQUFXLElBQUlGLFNBQWYsQ0FBWjtBQUNBWCwwQkFBTUMsV0FBTixHQUFvQk0sU0FBcEI7QUFDQVAsMEJBQU1FLFFBQU4sQ0FBZVMsU0FBZjtBQUNIO0FBQ0Qsb0JBQUlYLE1BQU1HLFFBQVYsRUFDSVcsT0FBT0MscUJBQVAsQ0FBNkJmLE1BQU1NLEdBQW5DO0FBQ1AsYUFWRDtBQVdILFNBYkQsTUFjSztBQUNELGlCQUFLQSxHQUFMLEdBQVcsWUFBWTtBQUNuQjtBQUNBLG9CQUFJQyxZQUFZQyxZQUFZQyxHQUFaLEVBQWhCO0FBQUEsb0JBQW1DO0FBQ25DRSw0QkFBWSxDQUFDSixZQUFZUCxNQUFNQyxXQUFuQixJQUFrQyxNQUQ5QyxDQUZtQixDQUdtQztBQUN0RDtBQUNBRCxzQkFBTUQsR0FBTixHQUFZYSxLQUFLQyxLQUFMLENBQVcsSUFBSUYsU0FBZixDQUFaLENBTG1CLENBS29CO0FBQ3ZDWCxzQkFBTUMsV0FBTixHQUFvQk0sU0FBcEI7QUFDQVAsc0JBQU1FLFFBQU4sQ0FBZVMsU0FBZjtBQUNBLG9CQUFJWCxNQUFNRyxRQUFWLEVBQ0lXLE9BQU9DLHFCQUFQLENBQTZCZixNQUFNTSxHQUFuQztBQUNQLGFBVkQ7QUFXSDtBQUNKOzs7O2dDQUNPO0FBQ0osaUJBQUtILFFBQUwsR0FBZ0IsSUFBaEI7QUFDQSxpQkFBS0YsV0FBTCxHQUFtQk8sWUFBWUMsR0FBWixFQUFuQjtBQUNBSyxtQkFBT0MscUJBQVAsQ0FBNkIsS0FBS1QsR0FBbEM7QUFDQSxtQkFBTyxJQUFQO0FBQ0g7OzsrQkFDTTtBQUFFLGlCQUFLSCxRQUFMLEdBQWdCLEtBQWhCO0FBQXdCOzs7Ozs7a0JBRXRCO0FBQ1hOO0FBRFcsQyIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypOT1RFUzpcclxuVHV0b3JpYWwgb24gaG93IHRvIGNvbnRyb2wgRlBTIDo6IGh0dHA6Ly9jb2RldGhlb3J5LmluL2NvbnRyb2xsaW5nLXRoZS1mcmFtZS1yYXRlLXdpdGgtcmVxdWVzdGFuaW1hdGlvbmZyYW1lL1xyXG5cclxuRVhBTVBMRTpcclxucmxvb3AgPSBuZXcgUmVuZGVyTG9vcChmdW5jdGlvbihkdCl7XHJcbiAgICBjb25zb2xlLmxvZyhybG9vcC5mcHMgKyBcIiBcIiArIGR0KTtcclxufSwxMCkuc3RhcnQoKTtcclxuKi9cclxuLypOT1RFUzpcclxuVHV0b3JpYWwgb24gaG93IHRvIGNvbnRyb2wgRlBTIDo6IGh0dHA6Ly9jb2RldGhlb3J5LmluL2NvbnRyb2xsaW5nLXRoZS1mcmFtZS1yYXRlLXdpdGgtcmVxdWVzdGFuaW1hdGlvbmZyYW1lL1xyXG5cclxuRVhBTVBMRTpcclxucmxvb3AgPSBuZXcgUmVuZGVyTG9vcChmdW5jdGlvbihkdCl7XHJcbiAgICBjb25zb2xlLmxvZyhybG9vcC5mcHMgKyBcIiBcIiArIGR0KTtcclxufSwxMCkuc3RhcnQoKTtcclxuKi8gZXhwb3J0IGNsYXNzIFJlbmRlckxvb3Age1xyXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGZwcykge1xyXG4gICAgICAgIGxldCBvVGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5tc0xhc3RGcmFtZSA9IG51bGw7IC8vVGhlIHRpbWUgaW4gTWlsaXNlY29uZHMgb2YgdGhlIGxhc3QgZnJhbWUuXHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayA9IGNhbGxiYWNrOyAvL1doYXQgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBmcmFtZVxyXG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTsgLy9Db250cm9sIHRoZSBPbi9PZmYgc3RhdGUgb2YgdGhlIHJlbmRlciBsb29wXHJcbiAgICAgICAgdGhpcy5mcHMgPSAwOyAvL1NhdmUgdGhlIHZhbHVlIG9mIGhvdyBmYXN0IHRoZSBsb29wIGlzIGdvaW5nLlxyXG4gICAgICAgIC8vaWYoIWZwcyAmJiBmcHMgPiAwKXsgLy9CdWlsZCBhIHJ1biBtZXRob2QgdGhhdCBsaW1pdHMgdGhlIGZyYW1lcmF0ZVxyXG4gICAgICAgIGlmIChmcHMgIT0gdW5kZWZpbmVkICYmIGZwcyA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5tc0Zwc0xpbWl0ID0gMTAwMCAvIGZwczsgLy9DYWxjIGhvdyBtYW55IG1pbGxpc2Vjb25kcyBwZXIgZnJhbWUgaW4gb25lIHNlY29uZCBvZiB0aW1lLlxyXG4gICAgICAgICAgICB0aGlzLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vQ2FsY3VsYXRlIERlbHRhdGltZSBiZXR3ZWVuIGZyYW1lcyBhbmQgdGhlIEZQUyBjdXJyZW50bHkuXHJcbiAgICAgICAgICAgICAgICBsZXQgbXNDdXJyZW50ID0gcGVyZm9ybWFuY2Uubm93KCksIG1zRGVsdGEgPSAobXNDdXJyZW50IC0gb1RoaXMubXNMYXN0RnJhbWUpLCBkZWx0YVRpbWUgPSBtc0RlbHRhIC8gMTAwMC4wOyAvL1doYXQgZnJhY3Rpb24gb2YgYSBzaW5nbGUgc2Vjb25kIGlzIHRoZSBkZWx0YSB0aW1lXHJcbiAgICAgICAgICAgICAgICBpZiAobXNEZWx0YSA+PSBvVGhpcy5tc0Zwc0xpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb1RoaXMuZnBzID0gTWF0aC5mbG9vcigxIC8gZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBvVGhpcy5tc0xhc3RGcmFtZSA9IG1zQ3VycmVudDtcclxuICAgICAgICAgICAgICAgICAgICBvVGhpcy5jYWxsQmFjayhkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9UaGlzLmlzQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob1RoaXMucnVuKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9DYWxjdWxhdGUgRGVsdGF0aW1lIGJldHdlZW4gZnJhbWVzIGFuZCB0aGUgRlBTIGN1cnJlbnRseS5cclxuICAgICAgICAgICAgICAgIGxldCBtc0N1cnJlbnQgPSBwZXJmb3JtYW5jZS5ub3coKSwgLy9HaXZlcyB5b3UgdGhlIHdob2xlIG51bWJlciBvZiBob3cgbWFueSBtaWxsaXNlY29uZHMgc2luY2UgdGhlIGRhd24gb2YgdGltZSA6KVxyXG4gICAgICAgICAgICAgICAgZGVsdGFUaW1lID0gKG1zQ3VycmVudCAtIG9UaGlzLm1zTGFzdEZyYW1lKSAvIDEwMDAuMDsgLy9tcyBiZXR3ZWVuIGZyYW1lcywgVGhlbiAvIGJ5IDEgc2Vjb25kIHRvIGdldCB0aGUgZnJhY3Rpb24gb2YgYSBzZWNvbmQuXHJcbiAgICAgICAgICAgICAgICAvL05vdyBleGVjdXRlIGZyYW1lIHNpbmNlIHRoZSB0aW1lIGhhcyBlbGFwc2VkLlxyXG4gICAgICAgICAgICAgICAgb1RoaXMuZnBzID0gTWF0aC5mbG9vcigxIC8gZGVsdGFUaW1lKTsgLy9UaW1lIGl0IHRvb2sgdG8gZ2VuZXJhdGUgb25lIGZyYW1lLCBkaXZpZGUgMSBieSB0aGF0IHRvIGdldCBob3cgbWFueSBmcmFtZXMgaW4gb25lIHNlY29uZC5cclxuICAgICAgICAgICAgICAgIG9UaGlzLm1zTGFzdEZyYW1lID0gbXNDdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgb1RoaXMuY2FsbEJhY2soZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChvVGhpcy5pc0FjdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9UaGlzLnJ1bik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tc0xhc3RGcmFtZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5ydW4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc3RvcCgpIHsgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlOyB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgUmVuZGVyTG9vcCxcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xpYi9SZW5kZXJMb29wLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/* Resources.setup(gl,onReady).loadTexture(\\\"tex001\\\",\\\"../shared/UV_Grid_Lrg.jpg\\\").start(); */\\n/* Resources.setup(gl,onReady).loadTexture(\\\"tex001\\\",\\\"../shared/UV_Grid_Lrg.jpg\\\").start(); */var Resources = exports.Resources = function () {\\n    function Resources() {\\n        _classCallCheck(this, Resources);\\n    }\\n\\n    _createClass(Resources, null, [{\\n        key: 'setup',\\n\\n        //Setup resource object\\n        value: function setup(gl, completeHandler) {\\n            Resources.gl = gl;\\n            Resources.onComplete = completeHandler;\\n            return this;\\n        }\\n        //Start the download queue\\n\\n    }, {\\n        key: 'start',\\n        value: function start() {\\n            if (Resources.Queue.length > 0) Resources.loadNextItem();\\n        }\\n        //===================================================\\n        // Loading\\n\\n    }, {\\n        key: 'loadTexture',\\n        value: function loadTexture(name, src) {\\n            for (var i = 0; i < arguments.length; i += 2) {\\n                Resources.Queue.push({ type: 'img', name: arguments[i], src: arguments[i + 1] });\\n            }\\n            return this;\\n        }\\n        //===================================================\\n        // Manage Queue\\n\\n    }, {\\n        key: 'loadNextItem',\\n        value: function loadNextItem() {\\n            //.......................................\\n            if (Resources.Queue.length == 0) {\\n                if (Resources.onComplete != null) Resources.onComplete();else console.log('Resource Download Queue Complete');\\n                return;\\n            }\\n            //.......................................\\n            var itm = Resources.Queue.pop();\\n            switch (itm.type) {\\n                case 'img':\\n                    var img = new Image();\\n                    img.queueData = itm;\\n                    img.onload = Resources.onDownloadSuccess;\\n                    img.onabort = img.onerror = Resources.onDownloadError;\\n                    img.src = itm.src;\\n                    break;\\n            }\\n        }\\n        //===================================================\\n        // Event Handlers\\n\\n    }, {\\n        key: 'onDownloadSuccess',\\n        value: function onDownloadSuccess() {\\n            //Its an image, lets load it up as a texture in gl.\\n            if (this instanceof Image) {\\n                var dat = this.queueData;\\n                Resources.gl.fLoadTexture(dat.name, this);\\n            }\\n            Resources.loadNextItem();\\n        }\\n    }, {\\n        key: 'onDownloadError',\\n        value: function onDownloadError() {\\n            console.log('Error getting ', this);\\n            Resources.loadNextItem();\\n        }\\n    }]);\\n\\n    return Resources;\\n}();\\n\\nResources.Queue = [];\\nResources.onComplete = null;\\nResources.gl = null;\\nexports.default = {\\n    Resources: Resources\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL1Jlc291cmNlcy50cz8wNWZkIl0sIm5hbWVzIjpbIlJlc291cmNlcyIsImdsIiwiY29tcGxldGVIYW5kbGVyIiwib25Db21wbGV0ZSIsIlF1ZXVlIiwibGVuZ3RoIiwibG9hZE5leHRJdGVtIiwibmFtZSIsInNyYyIsImkiLCJhcmd1bWVudHMiLCJwdXNoIiwidHlwZSIsImNvbnNvbGUiLCJsb2ciLCJpdG0iLCJwb3AiLCJpbWciLCJJbWFnZSIsInF1ZXVlRGF0YSIsIm9ubG9hZCIsIm9uRG93bmxvYWRTdWNjZXNzIiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbkRvd25sb2FkRXJyb3IiLCJkYXQiLCJmTG9hZFRleHR1cmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBLDRGLElBQTBHQSxTLFdBQUFBLFM7Ozs7Ozs7O0FBQ3RHOzhCQUNhQyxFLEVBQUlDLGUsRUFBaUI7QUFDOUJGLHNCQUFVQyxFQUFWLEdBQWVBLEVBQWY7QUFDQUQsc0JBQVVHLFVBQVYsR0FBdUJELGVBQXZCO0FBQ0EsbUJBQU8sSUFBUDtBQUNIO0FBQ0Q7Ozs7Z0NBQ2U7QUFDWCxnQkFBSUYsVUFBVUksS0FBVixDQUFnQkMsTUFBaEIsR0FBeUIsQ0FBN0IsRUFDSUwsVUFBVU0sWUFBVjtBQUNQO0FBQ0Q7QUFDQTs7OztvQ0FDbUJDLEksRUFBTUMsRyxFQUFLO0FBQzFCLGlCQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUMsVUFBVUwsTUFBOUIsRUFBc0NJLEtBQUssQ0FBM0MsRUFBOEM7QUFDMUNULDBCQUFVSSxLQUFWLENBQWdCTyxJQUFoQixDQUFxQixFQUFFQyxNQUFNLEtBQVIsRUFBZUwsTUFBTUcsVUFBVUQsQ0FBVixDQUFyQixFQUFtQ0QsS0FBS0UsVUFBVUQsSUFBSSxDQUFkLENBQXhDLEVBQXJCO0FBQ0g7QUFDRCxtQkFBTyxJQUFQO0FBQ0g7QUFDRDtBQUNBOzs7O3VDQUNzQjtBQUNsQjtBQUNBLGdCQUFJVCxVQUFVSSxLQUFWLENBQWdCQyxNQUFoQixJQUEwQixDQUE5QixFQUFpQztBQUM3QixvQkFBSUwsVUFBVUcsVUFBVixJQUF3QixJQUE1QixFQUNJSCxVQUFVRyxVQUFWLEdBREosS0FHSVUsUUFBUUMsR0FBUixDQUFZLGtDQUFaO0FBQ0o7QUFDSDtBQUNEO0FBQ0EsZ0JBQUlDLE1BQU1mLFVBQVVJLEtBQVYsQ0FBZ0JZLEdBQWhCLEVBQVY7QUFDQSxvQkFBUUQsSUFBSUgsSUFBWjtBQUNJLHFCQUFLLEtBQUw7QUFDSSx3QkFBSUssTUFBTSxJQUFJQyxLQUFKLEVBQVY7QUFDQUQsd0JBQUlFLFNBQUosR0FBZ0JKLEdBQWhCO0FBQ0FFLHdCQUFJRyxNQUFKLEdBQWFwQixVQUFVcUIsaUJBQXZCO0FBQ0FKLHdCQUFJSyxPQUFKLEdBQWNMLElBQUlNLE9BQUosR0FBY3ZCLFVBQVV3QixlQUF0QztBQUNBUCx3QkFBSVQsR0FBSixHQUFVTyxJQUFJUCxHQUFkO0FBQ0E7QUFQUjtBQVNIO0FBQ0Q7QUFDQTs7Ozs0Q0FDMkI7QUFDdkI7QUFDQSxnQkFBSSxnQkFBZ0JVLEtBQXBCLEVBQTJCO0FBQ3ZCLG9CQUFJTyxNQUFNLEtBQUtOLFNBQWY7QUFDQW5CLDBCQUFVQyxFQUFWLENBQWF5QixZQUFiLENBQTBCRCxJQUFJbEIsSUFBOUIsRUFBb0MsSUFBcEM7QUFDSDtBQUNEUCxzQkFBVU0sWUFBVjtBQUNIOzs7MENBQ3dCO0FBQ3JCTyxvQkFBUUMsR0FBUixDQUFZLGdCQUFaLEVBQThCLElBQTlCO0FBQ0FkLHNCQUFVTSxZQUFWO0FBQ0g7Ozs7OztBQUVMTixVQUFVSSxLQUFWLEdBQWtCLEVBQWxCO0FBQ0FKLFVBQVVHLFVBQVYsR0FBdUIsSUFBdkI7QUFDQUgsVUFBVUMsRUFBVixHQUFlLElBQWY7a0JBQ2U7QUFDWEQ7QUFEVyxDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSZXNvdXJjZXMuc2V0dXAoZ2wsb25SZWFkeSkubG9hZFRleHR1cmUoXCJ0ZXgwMDFcIixcIi4uL3NoYXJlZC9VVl9HcmlkX0xyZy5qcGdcIikuc3RhcnQoKTsgKi9cclxuLyogUmVzb3VyY2VzLnNldHVwKGdsLG9uUmVhZHkpLmxvYWRUZXh0dXJlKFwidGV4MDAxXCIsXCIuLi9zaGFyZWQvVVZfR3JpZF9McmcuanBnXCIpLnN0YXJ0KCk7ICovIGV4cG9ydCBjbGFzcyBSZXNvdXJjZXMge1xyXG4gICAgLy9TZXR1cCByZXNvdXJjZSBvYmplY3RcclxuICAgIHN0YXRpYyBzZXR1cChnbCwgY29tcGxldGVIYW5kbGVyKSB7XHJcbiAgICAgICAgUmVzb3VyY2VzLmdsID0gZ2w7XHJcbiAgICAgICAgUmVzb3VyY2VzLm9uQ29tcGxldGUgPSBjb21wbGV0ZUhhbmRsZXI7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvL1N0YXJ0IHRoZSBkb3dubG9hZCBxdWV1ZVxyXG4gICAgc3RhdGljIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmIChSZXNvdXJjZXMuUXVldWUubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgUmVzb3VyY2VzLmxvYWROZXh0SXRlbSgpO1xyXG4gICAgfVxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIExvYWRpbmdcclxuICAgIHN0YXRpYyBsb2FkVGV4dHVyZShuYW1lLCBzcmMpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICBSZXNvdXJjZXMuUXVldWUucHVzaCh7IHR5cGU6ICdpbWcnLCBuYW1lOiBhcmd1bWVudHNbaV0sIHNyYzogYXJndW1lbnRzW2kgKyAxXSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gTWFuYWdlIFF1ZXVlXHJcbiAgICBzdGF0aWMgbG9hZE5leHRJdGVtKCkge1xyXG4gICAgICAgIC8vLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXHJcbiAgICAgICAgaWYgKFJlc291cmNlcy5RdWV1ZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoUmVzb3VyY2VzLm9uQ29tcGxldGUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIFJlc291cmNlcy5vbkNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXNvdXJjZSBEb3dubG9hZCBRdWV1ZSBDb21wbGV0ZScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXHJcbiAgICAgICAgbGV0IGl0bSA9IFJlc291cmNlcy5RdWV1ZS5wb3AoKTtcclxuICAgICAgICBzd2l0Y2ggKGl0bS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ltZyc6XHJcbiAgICAgICAgICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWcucXVldWVEYXRhID0gaXRtO1xyXG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IFJlc291cmNlcy5vbkRvd25sb2FkU3VjY2VzcztcclxuICAgICAgICAgICAgICAgIGltZy5vbmFib3J0ID0gaW1nLm9uZXJyb3IgPSBSZXNvdXJjZXMub25Eb3dubG9hZEVycm9yO1xyXG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IGl0bS5zcmM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gRXZlbnQgSGFuZGxlcnNcclxuICAgIHN0YXRpYyBvbkRvd25sb2FkU3VjY2VzcygpIHtcclxuICAgICAgICAvL0l0cyBhbiBpbWFnZSwgbGV0cyBsb2FkIGl0IHVwIGFzIGEgdGV4dHVyZSBpbiBnbC5cclxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEltYWdlKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXQgPSB0aGlzLnF1ZXVlRGF0YTtcclxuICAgICAgICAgICAgUmVzb3VyY2VzLmdsLmZMb2FkVGV4dHVyZShkYXQubmFtZSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFJlc291cmNlcy5sb2FkTmV4dEl0ZW0oKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBvbkRvd25sb2FkRXJyb3IoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGdldHRpbmcgJywgdGhpcyk7XHJcbiAgICAgICAgUmVzb3VyY2VzLmxvYWROZXh0SXRlbSgpO1xyXG4gICAgfVxyXG59XHJcblJlc291cmNlcy5RdWV1ZSA9IFtdO1xyXG5SZXNvdXJjZXMub25Db21wbGV0ZSA9IG51bGw7XHJcblJlc291cmNlcy5nbCA9IG51bGw7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIFJlc291cmNlcyxcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xpYi9SZXNvdXJjZXMudHMiXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\neval(\"// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2FwcC5jc3M/YjQzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hc3NldHMvYXBwLmNzc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"module.exports = __webpack_require__.p + \\\"uvgrid01.jpg\\\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3V2Z3JpZDAxLmpwZz9jNjA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwidXZncmlkMDEuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvYXNzZXRzL3V2Z3JpZDAxLmpwZ1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\neval(\"module.exports = \\\"#version 300 es\\\\nprecision mediump float;\\\\nuniform sampler2D uTexture;\\\\nin highp vec2 vUV;\\\\nout vec4 outColor;\\\\n\\\\nvoid main(void){\\\\n  outColor = texture(uTexture,vUV*1.5);\\\\n}\\\\n\\\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9mU2hhZGVyLmdsc2w/NzA5NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyREFBMkQsNkJBQTZCLG9CQUFvQixvQkFBb0Isb0JBQW9CLHlDQUF5QyxHQUFHIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbmluIGhpZ2hwIHZlYzIgdlVWO1xcbm91dCB2ZWM0IG91dENvbG9yO1xcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gIG91dENvbG9yID0gdGV4dHVyZSh1VGV4dHVyZSx2VVYqMS41KTtcXG59XFxuXCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zaGFkZXJzL2ZTaGFkZXIuZ2xzbFxuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\neval(\"module.exports = \\\"#version 300 es\\\\nin vec4 a_position;\\\\nin vec3 a_norm;\\\\nin vec2 a_uv;\\\\n\\\\nuniform mat4 uPMatrix;\\\\nuniform mat4 uMVMatrix;\\\\nuniform mat4 uCameraMatrix;\\\\nout highp vec2 vUV;\\\\n\\\\nvoid main(void){\\\\n  vUV = a_uv;\\\\n  gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position.xyz, 1.0); \\\\n}\\\\n\\\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy92U2hhZGVyLmdsc2w/YjA5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0QsaUJBQWlCLGVBQWUsMEJBQTBCLHlCQUF5Qiw2QkFBNkIscUJBQXFCLG9CQUFvQixlQUFlLG1GQUFtRixJQUFJIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIiN2ZXJzaW9uIDMwMCBlc1xcbmluIHZlYzQgYV9wb3NpdGlvbjtcXG5pbiB2ZWMzIGFfbm9ybTtcXG5pbiB2ZWMyIGFfdXY7XFxuXFxudW5pZm9ybSBtYXQ0IHVQTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1TVZNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHVDYW1lcmFNYXRyaXg7XFxub3V0IGhpZ2hwIHZlYzIgdlVWO1xcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gIHZVViA9IGFfdXY7XFxuICBnbF9Qb3NpdGlvbiA9IHVQTWF0cml4ICogdUNhbWVyYU1hdHJpeCAqIHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbi54eXosIDEuMCk7IFxcbn1cXG5cIlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3NoYWRlcnMvdlNoYWRlci5nbHNsXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\");\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.Model = undefined;\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _Transform = __webpack_require__(1);\\n\\nvar TRANSFORM = _interopRequireWildcard(_Transform);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Transform = TRANSFORM.Transform;\\n\\nvar Model = exports.Model = function () {\\n    function Model(meshData) {\\n        _classCallCheck(this, Model);\\n\\n        this.transform = new Transform();\\n        this.mesh = meshData;\\n    }\\n    //--------------------------------------------------------------------------\\n    //Getters/Setters\\n\\n\\n    _createClass(Model, [{\\n        key: 'setScale',\\n        value: function setScale(x, y, z) {\\n            this.transform.scale.set(x, y, z);return this;\\n        }\\n    }, {\\n        key: 'setPosition',\\n        value: function setPosition(x, y, z) {\\n            this.transform.position.set(x, y, z);return this;\\n        }\\n    }, {\\n        key: 'setRotation',\\n        value: function setRotation(x, y, z) {\\n            this.transform.rotation.set(x, y, z);return this;\\n        }\\n    }, {\\n        key: 'addScale',\\n        value: function addScale(x, y, z) {\\n            this.transform.scale.x += x;this.transform.scale.y += y;this.transform.scale.y += y;return this;\\n        }\\n    }, {\\n        key: 'addPosition',\\n        value: function addPosition(x, y, z) {\\n            this.transform.position.x += x;this.transform.position.y += y;this.transform.position.z += z;return this;\\n        }\\n    }, {\\n        key: 'addRotation',\\n        value: function addRotation(x, y, z) {\\n            this.transform.rotation.x += x;this.transform.rotation.y += y;this.transform.rotation.z += z;return this;\\n        }\\n        //--------------------------------------------------------------------------\\n        //Things to do before its time to render\\n\\n    }, {\\n        key: 'preRender',\\n        value: function preRender() {\\n            this.transform.updateMatrix();return this;\\n        }\\n    }]);\\n\\n    return Model;\\n}();\\n\\nexports.default = {\\n    Model: Model\\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL01vZGVsLnRzP2U4YzUiXSwibmFtZXMiOlsiVFJBTlNGT1JNIiwiVHJhbnNmb3JtIiwiTW9kZWwiLCJtZXNoRGF0YSIsInRyYW5zZm9ybSIsIm1lc2giLCJ4IiwieSIsInoiLCJzY2FsZSIsInNldCIsInBvc2l0aW9uIiwicm90YXRpb24iLCJ1cGRhdGVNYXRyaXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztJQUFZQSxTOzs7Ozs7SUFDSkMsUyxHQUFjRCxTLENBQWRDLFM7O0lBQ0tDLEssV0FBQUEsSztBQUNULG1CQUFZQyxRQUFaLEVBQXNCO0FBQUE7O0FBQ2xCLGFBQUtDLFNBQUwsR0FBaUIsSUFBSUgsU0FBSixFQUFqQjtBQUNBLGFBQUtJLElBQUwsR0FBWUYsUUFBWjtBQUNIO0FBQ0Q7QUFDQTs7Ozs7aUNBQ1NHLEMsRUFBR0MsQyxFQUFHQyxDLEVBQUc7QUFBRSxpQkFBS0osU0FBTCxDQUFlSyxLQUFmLENBQXFCQyxHQUFyQixDQUF5QkosQ0FBekIsRUFBNEJDLENBQTVCLEVBQStCQyxDQUEvQixFQUFtQyxPQUFPLElBQVA7QUFBYzs7O29DQUN6REYsQyxFQUFHQyxDLEVBQUdDLEMsRUFBRztBQUFFLGlCQUFLSixTQUFMLENBQWVPLFFBQWYsQ0FBd0JELEdBQXhCLENBQTRCSixDQUE1QixFQUErQkMsQ0FBL0IsRUFBa0NDLENBQWxDLEVBQXNDLE9BQU8sSUFBUDtBQUFjOzs7b0NBQy9ERixDLEVBQUdDLEMsRUFBR0MsQyxFQUFHO0FBQUUsaUJBQUtKLFNBQUwsQ0FBZVEsUUFBZixDQUF3QkYsR0FBeEIsQ0FBNEJKLENBQTVCLEVBQStCQyxDQUEvQixFQUFrQ0MsQ0FBbEMsRUFBc0MsT0FBTyxJQUFQO0FBQWM7OztpQ0FDbEVGLEMsRUFBR0MsQyxFQUFHQyxDLEVBQUc7QUFBRSxpQkFBS0osU0FBTCxDQUFlSyxLQUFmLENBQXFCSCxDQUFyQixJQUEwQkEsQ0FBMUIsQ0FBNkIsS0FBS0YsU0FBTCxDQUFlSyxLQUFmLENBQXFCRixDQUFyQixJQUEwQkEsQ0FBMUIsQ0FBNkIsS0FBS0gsU0FBTCxDQUFlSyxLQUFmLENBQXFCRixDQUFyQixJQUEwQkEsQ0FBMUIsQ0FBNkIsT0FBTyxJQUFQO0FBQWM7OztvQ0FDN0dELEMsRUFBR0MsQyxFQUFHQyxDLEVBQUc7QUFBRSxpQkFBS0osU0FBTCxDQUFlTyxRQUFmLENBQXdCTCxDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsS0FBS0YsU0FBTCxDQUFlTyxRQUFmLENBQXdCSixDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsS0FBS0gsU0FBTCxDQUFlTyxRQUFmLENBQXdCSCxDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsT0FBTyxJQUFQO0FBQWM7OztvQ0FDekhGLEMsRUFBR0MsQyxFQUFHQyxDLEVBQUc7QUFBRSxpQkFBS0osU0FBTCxDQUFlUSxRQUFmLENBQXdCTixDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsS0FBS0YsU0FBTCxDQUFlUSxRQUFmLENBQXdCTCxDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsS0FBS0gsU0FBTCxDQUFlUSxRQUFmLENBQXdCSixDQUF4QixJQUE2QkEsQ0FBN0IsQ0FBZ0MsT0FBTyxJQUFQO0FBQWM7QUFDckk7QUFDQTs7OztvQ0FDWTtBQUFFLGlCQUFLSixTQUFMLENBQWVTLFlBQWYsR0FBK0IsT0FBTyxJQUFQO0FBQWM7Ozs7OztrQkFFaEQ7QUFDWFg7QUFEVyxDIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVFJBTlNGT1JNIGZyb20gJy4vVHJhbnNmb3JtJztcclxuY29uc3QgeyBUcmFuc2Zvcm0gfSA9IFRSQU5TRk9STTtcclxuZXhwb3J0IGNsYXNzIE1vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc2hEYXRhKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaERhdGE7XHJcbiAgICB9XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvL0dldHRlcnMvU2V0dGVyc1xyXG4gICAgc2V0U2NhbGUoeCwgeSwgeikgeyB0aGlzLnRyYW5zZm9ybS5zY2FsZS5zZXQoeCwgeSwgeik7IHJldHVybiB0aGlzOyB9XHJcbiAgICBzZXRQb3NpdGlvbih4LCB5LCB6KSB7IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnNldCh4LCB5LCB6KTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIHNldFJvdGF0aW9uKHgsIHksIHopIHsgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24uc2V0KHgsIHksIHopOyByZXR1cm4gdGhpczsgfVxyXG4gICAgYWRkU2NhbGUoeCwgeSwgeikgeyB0aGlzLnRyYW5zZm9ybS5zY2FsZS54ICs9IHg7IHRoaXMudHJhbnNmb3JtLnNjYWxlLnkgKz0geTsgdGhpcy50cmFuc2Zvcm0uc2NhbGUueSArPSB5OyByZXR1cm4gdGhpczsgfVxyXG4gICAgYWRkUG9zaXRpb24oeCwgeSwgeikgeyB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54ICs9IHg7IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgKz0geTsgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueiArPSB6OyByZXR1cm4gdGhpczsgfVxyXG4gICAgYWRkUm90YXRpb24oeCwgeSwgeikgeyB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi54ICs9IHg7IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uLnkgKz0geTsgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24ueiArPSB6OyByZXR1cm4gdGhpczsgfVxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy9UaGluZ3MgdG8gZG8gYmVmb3JlIGl0cyB0aW1lIHRvIHJlbmRlclxyXG4gICAgcHJlUmVuZGVyKCkgeyB0aGlzLnRyYW5zZm9ybS51cGRhdGVNYXRyaXgoKTsgcmV0dXJuIHRoaXM7IH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBNb2RlbCxcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xpYi9Nb2RlbC50cyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\neval(\"\\n\\n__webpack_require__(9);\\n\\n__webpack_require__(10);\\n\\nvar _vShader = __webpack_require__(12);\\n\\nvar _vShader2 = _interopRequireDefault(_vShader);\\n\\nvar _fShader = __webpack_require__(11);\\n\\nvar _fShader2 = _interopRequireDefault(_fShader);\\n\\nvar _gl = __webpack_require__(0);\\n\\nvar GL = _interopRequireWildcard(_gl);\\n\\nvar _Shaders = __webpack_require__(2);\\n\\nvar SHADERS = _interopRequireWildcard(_Shaders);\\n\\nvar _RenderLoop = __webpack_require__(7);\\n\\nvar RENDERLOOP = _interopRequireWildcard(_RenderLoop);\\n\\nvar _Primatives = __webpack_require__(6);\\n\\nvar PRIMATIVES = _interopRequireWildcard(_Primatives);\\n\\nvar _Camera = __webpack_require__(4);\\n\\nvar CAMERA = _interopRequireWildcard(_Camera);\\n\\nvar _GridFloor = __webpack_require__(5);\\n\\nvar GRIDFLOOR = _interopRequireWildcard(_GridFloor);\\n\\nvar _Resources = __webpack_require__(8);\\n\\nvar RESOURCES = _interopRequireWildcard(_Resources);\\n\\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar GLInstance = GL.GLInstance;\\n// Libs\\n\\n// import './assets/miramar_01.png';\\n// import './assets/miramar_02.png';\\n// import './assets/miramar_03.png';\\n// import './assets/miramar_04.png';\\n// import './assets/miramar_05.png';\\n// import './assets/miramar_06.png';\\n// import './assets/interstellar_01.png';\\n// import './assets/interstellar_02.png';\\n// import './assets/interstellar_03.png';\\n// import './assets/interstellar_04.png';\\n// import './assets/interstellar_05.png';\\n// import './assets/interstellar_06.png';\\n// import './assets/pirate_girl.jpg';\\n// Assets\\n\\nvar ShaderBuilder = SHADERS.ShaderBuilder;\\nvar Camera = CAMERA.Camera,\\n    CameraController = CAMERA.CameraController;\\nvar GridFloor = GRIDFLOOR.GridFloor;\\nvar Resources = RESOURCES.Resources;\\nvar Cube = PRIMATIVES.Cube;\\nvar RenderLoop = RENDERLOOP.RenderLoop;\\n\\nvar gl = void 0;\\nvar gRLoop = void 0;\\nvar gShader = void 0;\\nvar gModel = void 0;\\nvar gCamera = void 0;\\nvar gCameraCtrl = void 0;\\nvar gGridFloor = void 0;\\n// var mDebugVerts;\\n// var mDebugLine;\\nwindow.addEventListener('load', function () {\\n    //....................................\\n    //System Setup\\n    gl = GLInstance('glcanvas');\\n    if (gl) {\\n        gl.fFitScreen(0.95, 0.9).fClear();\\n        gCamera = new Camera(gl);\\n        gCamera.transform.position.set(0, 1, 3);\\n        gCameraCtrl = new CameraController(gl, gCamera);\\n        gGridFloor = new GridFloor(gl);\\n        gRLoop = new RenderLoop(onRender);\\n        //....................................\\n        // Load up resources\\n        Resources.setup(gl, onReady).loadTexture('tex001', './assets/uvgrid01.jpg').start();\\n    }\\n});\\n//==================================================\\n//When Main System is setup and all resources are downloaded.\\nfunction onReady() {\\n    if (gl) {\\n        //Setup Test Shader, Modal, Meshes\\n        gShader = new ShaderBuilder(gl, _vShader2.default, _fShader2.default).prepareUniforms('uPMatrix', 'mat4', 'uMVMatrix', 'mat4', 'uCameraMatrix', 'mat4').prepareTextures('uTexture', 'tex001').setUniforms('uPMatrix', gCamera.projectionMatrix);\\n        gModel = Cube.createModal(gl, 'Cube', true).setPosition(0, 0.6, 0); //.setScale(0.7,0.7,0.7);\\n        //....................................\\n        gRLoop.start();\\n        //onRender(0);\\n    }\\n}\\n//==================================================\\n//Main Render Loop\\nfunction onRender(dt) {\\n    if (gl) {\\n        //................................\\n        //Main Elements to draw to the frame\\n        gl.fClear();\\n        gCamera.updateViewMatrix();\\n        gGridFloor.render(gCamera);\\n        //................................\\n        //Draw Out models\\n        gShader.preRender('uCameraMatrix', gCamera.viewMatrix).renderModel(gModel.preRender(), false);\\n    }\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHM/ZWFjMyJdLCJuYW1lcyI6WyJHTCIsIlNIQURFUlMiLCJSRU5ERVJMT09QIiwiUFJJTUFUSVZFUyIsIkNBTUVSQSIsIkdSSURGTE9PUiIsIlJFU09VUkNFUyIsIkdMSW5zdGFuY2UiLCJTaGFkZXJCdWlsZGVyIiwiQ2FtZXJhIiwiQ2FtZXJhQ29udHJvbGxlciIsIkdyaWRGbG9vciIsIlJlc291cmNlcyIsIkN1YmUiLCJSZW5kZXJMb29wIiwiZ2wiLCJnUkxvb3AiLCJnU2hhZGVyIiwiZ01vZGVsIiwiZ0NhbWVyYSIsImdDYW1lcmFDdHJsIiwiZ0dyaWRGbG9vciIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJmRml0U2NyZWVuIiwiZkNsZWFyIiwidHJhbnNmb3JtIiwicG9zaXRpb24iLCJzZXQiLCJvblJlbmRlciIsInNldHVwIiwib25SZWFkeSIsImxvYWRUZXh0dXJlIiwic3RhcnQiLCJwcmVwYXJlVW5pZm9ybXMiLCJwcmVwYXJlVGV4dHVyZXMiLCJzZXRVbmlmb3JtcyIsInByb2plY3Rpb25NYXRyaXgiLCJjcmVhdGVNb2RhbCIsInNldFBvc2l0aW9uIiwiZHQiLCJ1cGRhdGVWaWV3TWF0cml4IiwicmVuZGVyIiwicHJlUmVuZGVyIiwidmlld01hdHJpeCIsInJlbmRlck1vZGVsIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOztBQWNBOzs7O0FBQ0E7Ozs7QUFFQTs7SUFBWUEsRTs7QUFDWjs7SUFBWUMsTzs7QUFDWjs7SUFBWUMsVTs7QUFDWjs7SUFBWUMsVTs7QUFDWjs7SUFBWUMsTTs7QUFDWjs7SUFBWUMsUzs7QUFDWjs7SUFBWUMsUzs7Ozs7O0lBQ0pDLFUsR0FBZVAsRSxDQUFmTyxVO0FBUlI7O0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFmQTs7SUEyQlFDLGEsR0FBa0JQLE8sQ0FBbEJPLGE7SUFDQUMsTSxHQUE2QkwsTSxDQUE3QkssTTtJQUFRQyxnQixHQUFxQk4sTSxDQUFyQk0sZ0I7SUFDUkMsUyxHQUFjTixTLENBQWRNLFM7SUFDQUMsUyxHQUFjTixTLENBQWRNLFM7SUFDQUMsSSxHQUFTVixVLENBQVRVLEk7SUFDQUMsVSxHQUFlWixVLENBQWZZLFU7O0FBQ1IsSUFBSUMsV0FBSjtBQUNBLElBQUlDLGVBQUo7QUFDQSxJQUFJQyxnQkFBSjtBQUNBLElBQUlDLGVBQUo7QUFDQSxJQUFJQyxnQkFBSjtBQUNBLElBQUlDLG9CQUFKO0FBQ0EsSUFBSUMsbUJBQUo7QUFDQTtBQUNBO0FBQ0FDLE9BQU9DLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLFlBQVk7QUFDeEM7QUFDQTtBQUNBUixTQUFLUixXQUFXLFVBQVgsQ0FBTDtBQUNBLFFBQUlRLEVBQUosRUFBUTtBQUNKQSxXQUFHUyxVQUFILENBQWMsSUFBZCxFQUFvQixHQUFwQixFQUF5QkMsTUFBekI7QUFDQU4sa0JBQVUsSUFBSVYsTUFBSixDQUFXTSxFQUFYLENBQVY7QUFDQUksZ0JBQVFPLFNBQVIsQ0FBa0JDLFFBQWxCLENBQTJCQyxHQUEzQixDQUErQixDQUEvQixFQUFrQyxDQUFsQyxFQUFxQyxDQUFyQztBQUNBUixzQkFBYyxJQUFJVixnQkFBSixDQUFxQkssRUFBckIsRUFBeUJJLE9BQXpCLENBQWQ7QUFDQUUscUJBQWEsSUFBSVYsU0FBSixDQUFjSSxFQUFkLENBQWI7QUFDQUMsaUJBQVMsSUFBSUYsVUFBSixDQUFlZSxRQUFmLENBQVQ7QUFDQTtBQUNBO0FBQ0FqQixrQkFBVWtCLEtBQVYsQ0FBZ0JmLEVBQWhCLEVBQW9CZ0IsT0FBcEIsRUFBNkJDLFdBQTdCLENBQXlDLFFBQXpDLEVBQW1ELHVCQUFuRCxFQUE0RUMsS0FBNUU7QUFDSDtBQUNKLENBZkQ7QUFnQkE7QUFDQTtBQUNBLFNBQVNGLE9BQVQsR0FBbUI7QUFDZixRQUFJaEIsRUFBSixFQUFRO0FBQ0o7QUFDQUUsa0JBQVUsSUFBSVQsYUFBSixDQUFrQk8sRUFBbEIsd0NBQ0xtQixlQURLLENBQ1csVUFEWCxFQUN1QixNQUR2QixFQUMrQixXQUQvQixFQUM0QyxNQUQ1QyxFQUNvRCxlQURwRCxFQUNxRSxNQURyRSxFQUVMQyxlQUZLLENBRVcsVUFGWCxFQUV1QixRQUZ2QixFQUdMQyxXQUhLLENBR08sVUFIUCxFQUdtQmpCLFFBQVFrQixnQkFIM0IsQ0FBVjtBQUlBbkIsaUJBQVNMLEtBQUt5QixXQUFMLENBQWlCdkIsRUFBakIsRUFBcUIsTUFBckIsRUFBNkIsSUFBN0IsRUFDSndCLFdBREksQ0FDUSxDQURSLEVBQ1csR0FEWCxFQUNnQixDQURoQixDQUFULENBTkksQ0FPeUI7QUFDN0I7QUFDQXZCLGVBQU9pQixLQUFQO0FBQ0E7QUFDSDtBQUNKO0FBQ0Q7QUFDQTtBQUNBLFNBQVNKLFFBQVQsQ0FBa0JXLEVBQWxCLEVBQXNCO0FBQ2xCLFFBQUl6QixFQUFKLEVBQVE7QUFDSjtBQUNBO0FBQ0FBLFdBQUdVLE1BQUg7QUFDQU4sZ0JBQVFzQixnQkFBUjtBQUNBcEIsbUJBQVdxQixNQUFYLENBQWtCdkIsT0FBbEI7QUFDQTtBQUNBO0FBQ0FGLGdCQUFRMEIsU0FBUixDQUFrQixlQUFsQixFQUFtQ3hCLFFBQVF5QixVQUEzQyxFQUNLQyxXQURMLENBQ2lCM0IsT0FBT3lCLFNBQVAsRUFEakIsRUFDcUMsS0FEckM7QUFFSDtBQUNKIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQXNzZXRzXHJcbmltcG9ydCAnLi9hc3NldHMvYXBwLmNzcyc7XHJcbmltcG9ydCAnLi9hc3NldHMvdXZncmlkMDEuanBnJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9taXJhbWFyXzAxLnBuZyc7XHJcbi8vIGltcG9ydCAnLi9hc3NldHMvbWlyYW1hcl8wMi5wbmcnO1xyXG4vLyBpbXBvcnQgJy4vYXNzZXRzL21pcmFtYXJfMDMucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9taXJhbWFyXzA0LnBuZyc7XHJcbi8vIGltcG9ydCAnLi9hc3NldHMvbWlyYW1hcl8wNS5wbmcnO1xyXG4vLyBpbXBvcnQgJy4vYXNzZXRzL21pcmFtYXJfMDYucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDEucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDIucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDMucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDQucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDUucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9pbnRlcnN0ZWxsYXJfMDYucG5nJztcclxuLy8gaW1wb3J0ICcuL2Fzc2V0cy9waXJhdGVfZ2lybC5qcGcnO1xyXG5pbXBvcnQgdlNoYWRlciBmcm9tICcuL3NoYWRlcnMvdlNoYWRlci5nbHNsJztcclxuaW1wb3J0IGZTaGFkZXIgZnJvbSAnLi9zaGFkZXJzL2ZTaGFkZXIuZ2xzbCc7XHJcbi8vIExpYnNcclxuaW1wb3J0ICogYXMgR0wgZnJvbSAnLi9saWIvZ2wnO1xyXG5pbXBvcnQgKiBhcyBTSEFERVJTIGZyb20gJy4vbGliL1NoYWRlcnMnO1xyXG5pbXBvcnQgKiBhcyBSRU5ERVJMT09QIGZyb20gJy4vbGliL1JlbmRlckxvb3AnO1xyXG5pbXBvcnQgKiBhcyBQUklNQVRJVkVTIGZyb20gJy4vbGliL1ByaW1hdGl2ZXMnO1xyXG5pbXBvcnQgKiBhcyBDQU1FUkEgZnJvbSAnLi9saWIvQ2FtZXJhJztcclxuaW1wb3J0ICogYXMgR1JJREZMT09SIGZyb20gJy4vbGliL0dyaWRGbG9vcic7XHJcbmltcG9ydCAqIGFzIFJFU09VUkNFUyBmcm9tICcuL2xpYi9SZXNvdXJjZXMnO1xyXG5jb25zdCB7IEdMSW5zdGFuY2UgfSA9IEdMO1xyXG5jb25zdCB7IFNoYWRlckJ1aWxkZXIgfSA9IFNIQURFUlM7XHJcbmNvbnN0IHsgQ2FtZXJhLCBDYW1lcmFDb250cm9sbGVyIH0gPSBDQU1FUkE7XHJcbmNvbnN0IHsgR3JpZEZsb29yIH0gPSBHUklERkxPT1I7XHJcbmNvbnN0IHsgUmVzb3VyY2VzIH0gPSBSRVNPVVJDRVM7XHJcbmNvbnN0IHsgQ3ViZSB9ID0gUFJJTUFUSVZFUztcclxuY29uc3QgeyBSZW5kZXJMb29wIH0gPSBSRU5ERVJMT09QO1xyXG5sZXQgZ2w7XHJcbmxldCBnUkxvb3A7XHJcbmxldCBnU2hhZGVyO1xyXG5sZXQgZ01vZGVsO1xyXG5sZXQgZ0NhbWVyYTtcclxubGV0IGdDYW1lcmFDdHJsO1xyXG5sZXQgZ0dyaWRGbG9vcjtcclxuLy8gdmFyIG1EZWJ1Z1ZlcnRzO1xyXG4vLyB2YXIgbURlYnVnTGluZTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgLy9TeXN0ZW0gU2V0dXBcclxuICAgIGdsID0gR0xJbnN0YW5jZSgnZ2xjYW52YXMnKTtcclxuICAgIGlmIChnbCkge1xyXG4gICAgICAgIGdsLmZGaXRTY3JlZW4oMC45NSwgMC45KS5mQ2xlYXIoKTtcclxuICAgICAgICBnQ2FtZXJhID0gbmV3IENhbWVyYShnbCk7XHJcbiAgICAgICAgZ0NhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24uc2V0KDAsIDEsIDMpO1xyXG4gICAgICAgIGdDYW1lcmFDdHJsID0gbmV3IENhbWVyYUNvbnRyb2xsZXIoZ2wsIGdDYW1lcmEpO1xyXG4gICAgICAgIGdHcmlkRmxvb3IgPSBuZXcgR3JpZEZsb29yKGdsKTtcclxuICAgICAgICBnUkxvb3AgPSBuZXcgUmVuZGVyTG9vcChvblJlbmRlcik7XHJcbiAgICAgICAgLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cclxuICAgICAgICAvLyBMb2FkIHVwIHJlc291cmNlc1xyXG4gICAgICAgIFJlc291cmNlcy5zZXR1cChnbCwgb25SZWFkeSkubG9hZFRleHR1cmUoJ3RleDAwMScsICcuL2Fzc2V0cy91dmdyaWQwMS5qcGcnKS5zdGFydCgpO1xyXG4gICAgfVxyXG59KTtcclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1doZW4gTWFpbiBTeXN0ZW0gaXMgc2V0dXAgYW5kIGFsbCByZXNvdXJjZXMgYXJlIGRvd25sb2FkZWQuXHJcbmZ1bmN0aW9uIG9uUmVhZHkoKSB7XHJcbiAgICBpZiAoZ2wpIHtcclxuICAgICAgICAvL1NldHVwIFRlc3QgU2hhZGVyLCBNb2RhbCwgTWVzaGVzXHJcbiAgICAgICAgZ1NoYWRlciA9IG5ldyBTaGFkZXJCdWlsZGVyKGdsLCB2U2hhZGVyLCBmU2hhZGVyKVxyXG4gICAgICAgICAgICAucHJlcGFyZVVuaWZvcm1zKCd1UE1hdHJpeCcsICdtYXQ0JywgJ3VNVk1hdHJpeCcsICdtYXQ0JywgJ3VDYW1lcmFNYXRyaXgnLCAnbWF0NCcpXHJcbiAgICAgICAgICAgIC5wcmVwYXJlVGV4dHVyZXMoJ3VUZXh0dXJlJywgJ3RleDAwMScpXHJcbiAgICAgICAgICAgIC5zZXRVbmlmb3JtcygndVBNYXRyaXgnLCBnQ2FtZXJhLnByb2plY3Rpb25NYXRyaXgpO1xyXG4gICAgICAgIGdNb2RlbCA9IEN1YmUuY3JlYXRlTW9kYWwoZ2wsICdDdWJlJywgdHJ1ZSlcclxuICAgICAgICAgICAgLnNldFBvc2l0aW9uKDAsIDAuNiwgMCk7IC8vLnNldFNjYWxlKDAuNywwLjcsMC43KTtcclxuICAgICAgICAvLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxyXG4gICAgICAgIGdSTG9vcC5zdGFydCgpO1xyXG4gICAgICAgIC8vb25SZW5kZXIoMCk7XHJcbiAgICB9XHJcbn1cclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL01haW4gUmVuZGVyIExvb3BcclxuZnVuY3Rpb24gb25SZW5kZXIoZHQpIHtcclxuICAgIGlmIChnbCkge1xyXG4gICAgICAgIC8vLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cclxuICAgICAgICAvL01haW4gRWxlbWVudHMgdG8gZHJhdyB0byB0aGUgZnJhbWVcclxuICAgICAgICBnbC5mQ2xlYXIoKTtcclxuICAgICAgICBnQ2FtZXJhLnVwZGF0ZVZpZXdNYXRyaXgoKTtcclxuICAgICAgICBnR3JpZEZsb29yLnJlbmRlcihnQ2FtZXJhKTtcclxuICAgICAgICAvLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXHJcbiAgICAgICAgLy9EcmF3IE91dCBtb2RlbHNcclxuICAgICAgICBnU2hhZGVyLnByZVJlbmRlcigndUNhbWVyYU1hdHJpeCcsIGdDYW1lcmEudmlld01hdHJpeClcclxuICAgICAgICAgICAgLnJlbmRlck1vZGVsKGdNb2RlbC5wcmVSZW5kZXIoKSwgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50cyJdLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// app-e245f85efcc40040a1ee.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e245f85efcc40040a1ee"],"sourceRoot":""}